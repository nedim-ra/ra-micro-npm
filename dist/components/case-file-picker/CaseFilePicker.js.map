{"version":3,"file":"CaseFilePicker.js","sources":["../../../lib/components/case-file-picker/CaseFilePicker.tsx"],"sourcesContent":["import {\r\n  ComboBox,\r\n  IComboBox,\r\n  IComboBoxOption,\r\n  IComboBoxProps,\r\n  IComboBoxStyles,\r\n} from \"@fluentui/react\";\r\nimport React, { FormEvent } from \"react\";\r\nimport { CaseFile } from \"../../main.ts\";\r\n\r\ninterface CaseControlProps extends Partial<IComboBoxProps> {\r\n  label: string;\r\n  handleComboBoxChange: (options: IComboBoxOption[]) => void;\r\n  showErrorMessage: (errorMsg: string) => void;\r\n  styles: Partial<IComboBoxStyles>;\r\n  selectedOption: IComboBoxOption;\r\n  caseOptions: IComboBoxOption[];\r\n  setSelectedOption: (option: IComboBoxOption) => void;\r\n  disabled?: boolean;\r\n  getCase: (numValue: string) => Promise<CaseFile[]>;\r\n  getCaseByName: (input: string) => Promise<CaseFile[]>;\r\n}\r\n\r\nfunction CaseFilePicker({\r\n  label,\r\n  handleComboBoxChange,\r\n  showErrorMessage,\r\n  styles,\r\n  selectedOption,\r\n  caseOptions,\r\n  setSelectedOption,\r\n  disabled = false,\r\n  getCase,\r\n  getCaseByName,\r\n}: CaseControlProps): JSX.Element {\r\n  const comboBoxRef = React.useRef<IComboBox>(null);\r\n  const initialStyle = Object.assign(styles || {});\r\n\r\n  //  Update styles to include the background color\r\n  const comboBoxStyles: Partial<IComboBoxStyles> = {\r\n    ...initialStyle, // Spread existing styles\r\n    root: {\r\n      ...initialStyle.root, // Spread existing container styles\r\n      backgroundColor: \"#ffffd0\", // Add the background color\r\n    },\r\n    input: {\r\n      ...initialStyle.input, // Spread existing container styles\r\n      backgroundColor: \"#ffffd0\",\r\n    },\r\n  };\r\n\r\n  const formatCaseYear = (value: string) => {\r\n    const caseNumber = value.slice(0, -2);\r\n    const yearNumber = value.slice(-2);\r\n    return `${caseNumber}/${yearNumber}`;\r\n  };\r\n\r\n  const onChangeValue = async (input: string) => {\r\n    const numValue = input.replace(/\\D/g, \"\");\r\n    const formattedValue = formatCaseYear(numValue);\r\n    let caseData = await getCase(numValue);\r\n    if (caseData && caseData.length > 0) {\r\n      const fullText = `${formattedValue} - ${caseData[0].akt_name}`;\r\n      const options = [{ key: numValue, text: fullText }];\r\n      comboBoxRef?.current?.focus(true);\r\n      handleComboBoxChange(options);\r\n    } else {\r\n      caseData = await getCaseByName(input);\r\n      if (!caseData || caseData.length === 0) {\r\n        showErrorMessage(\"Es gibt keine Suchergebnisse\"); // TEMP\r\n      } else {\r\n        const options = caseData.map((item) => ({\r\n          key: formatCaseYear(item.akt_nr || \"\"),\r\n          text: `${formatCaseYear(item.akt_nr || \"\")} - ${item.akt_name}`,\r\n        }));\r\n        comboBoxRef?.current?.focus(true);\r\n        handleComboBoxChange(options);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <ComboBox\r\n      componentRef={comboBoxRef}\r\n      allowFreeform\r\n      label={label}\r\n      onChange={(\r\n        event: FormEvent<IComboBox>,\r\n        _option,\r\n        _index,\r\n        value?: string\r\n      ) => {\r\n        if (event && value) {\r\n          onChangeValue(value);\r\n        }\r\n      }}\r\n      onItemClick={(_, option?: IComboBoxOption) => {\r\n        if (option) {\r\n          setSelectedOption(option);\r\n        }\r\n      }}\r\n      styles={comboBoxStyles}\r\n      options={caseOptions}\r\n      selectedKey={selectedOption ? selectedOption.key : undefined}\r\n      useComboBoxAsMenuWidth\r\n      disabled={disabled}\r\n    />\r\n  );\r\n}\r\n\r\nCaseFilePicker.defaultProps = {\r\n  disabled: false,\r\n};\r\n\r\nexport default CaseFilePicker;\r\n"],"names":["CaseFilePicker","label","handleComboBoxChange","showErrorMessage","styles","selectedOption","caseOptions","setSelectedOption","disabled","getCase","getCaseByName","comboBoxRef","React","initialStyle","comboBoxStyles","formatCaseYear","value","caseNumber","yearNumber","onChangeValue","input","numValue","formattedValue","caseData","fullText","options","_a","item","_b","jsx","ComboBox","event","_option","_index","_","option"],"mappings":";;;AAuBA,SAASA,EAAe;AAAA,EACtB,OAAAC;AAAA,EACA,sBAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,QAAAC;AAAA,EACA,gBAAAC;AAAA,EACA,aAAAC;AAAA,EACA,mBAAAC;AAAA,EACA,UAAAC,IAAW;AAAA,EACX,SAAAC;AAAA,EACA,eAAAC;AACF,GAAkC;AAC1B,QAAAC,IAAcC,EAAM,OAAkB,IAAI,GAC1CC,IAAe,OAAO,OAAOT,KAAU,CAAE,CAAA,GAGzCU,IAA2C;AAAA,IAC/C,GAAGD;AAAA;AAAA,IACH,MAAM;AAAA,MACJ,GAAGA,EAAa;AAAA;AAAA,MAChB,iBAAiB;AAAA;AAAA,IACnB;AAAA,IACA,OAAO;AAAA,MACL,GAAGA,EAAa;AAAA;AAAA,MAChB,iBAAiB;AAAA,IACnB;AAAA,EAAA,GAGIE,IAAiB,CAACC,MAAkB;AACxC,UAAMC,IAAaD,EAAM,MAAM,GAAG,EAAE,GAC9BE,IAAaF,EAAM,MAAM,EAAE;AAC1B,WAAA,GAAGC,CAAU,IAAIC,CAAU;AAAA,EAAA,GAG9BC,IAAgB,OAAOC,MAAkB;;AAC7C,UAAMC,IAAWD,EAAM,QAAQ,OAAO,EAAE,GAClCE,IAAiBP,EAAeM,CAAQ;AAC1C,QAAAE,IAAW,MAAMd,EAAQY,CAAQ;AACjC,QAAAE,KAAYA,EAAS,SAAS,GAAG;AACnC,YAAMC,IAAW,GAAGF,CAAc,MAAMC,EAAS,CAAC,EAAE,QAAQ,IACtDE,IAAU,CAAC,EAAE,KAAKJ,GAAU,MAAMG,GAAU;AACrC,OAAAE,IAAAf,KAAA,gBAAAA,EAAA,YAAA,QAAAe,EAAS,MAAM,KAC5BxB,EAAqBuB,CAAO;AAAA,IAAA,WAEjBF,IAAA,MAAMb,EAAcU,CAAK,GAChC,CAACG,KAAYA,EAAS,WAAW;AACnC,MAAApB,EAAiB,8BAA8B;AAAA,SAC1C;AACL,YAAMsB,IAAUF,EAAS,IAAI,CAACI,OAAU;AAAA,QACtC,KAAKZ,EAAeY,EAAK,UAAU,EAAE;AAAA,QACrC,MAAM,GAAGZ,EAAeY,EAAK,UAAU,EAAE,CAAC,MAAMA,EAAK,QAAQ;AAAA,MAC7D,EAAA;AACW,OAAAC,IAAAjB,KAAA,gBAAAA,EAAA,YAAA,QAAAiB,EAAS,MAAM,KAC5B1B,EAAqBuB,CAAO;AAAA,IAC9B;AAAA,EACF;AAIA,SAAAI,gBAAAA,EAAA;AAAA,IAACC;AAAA,IAAA;AAAA,MACC,cAAcnB;AAAA,MACd,eAAa;AAAA,MACb,OAAAV;AAAA,MACA,UAAU,CACR8B,GACAC,GACAC,GACAjB,MACG;AACH,QAAIe,KAASf,KACXG,EAAcH,CAAK;AAAA,MAEvB;AAAA,MACA,aAAa,CAACkB,GAAGC,MAA6B;AAC5C,QAAIA,KACF5B,EAAkB4B,CAAM;AAAA,MAE5B;AAAA,MACA,QAAQrB;AAAA,MACR,SAASR;AAAA,MACT,aAAaD,IAAiBA,EAAe,MAAM;AAAA,MACnD,wBAAsB;AAAA,MACtB,UAAAG;AAAA,IAAA;AAAA,EAAA;AAGN;AAEAR,EAAe,eAAe;AAAA,EAC5B,UAAU;AACZ;"}