{"version":3,"file":"CaseFilePicker.js","sources":["../../../lib/components/case-file-picker/CaseFilePicker.tsx"],"sourcesContent":["import {\r\n  ComboBox,\r\n  IComboBox,\r\n  IComboBoxOption,\r\n  IComboBoxProps,\r\n  IComboBoxStyles,\r\n} from \"@fluentui/react\";\r\nimport React, { FormEvent } from \"react\";\r\nimport { CaseFileUtils } from \"../../main.ts\";\r\nimport CaseFileService from \"../../services/case-file-service.ts\";\r\n\r\ninterface CaseControlProps extends Partial<IComboBoxProps> {\r\n  label: string;\r\n  handleComboBoxChange: (options: IComboBoxOption[]) => void;\r\n  showErrorMessage: (errorMsg: string) => void;\r\n  styles: Partial<IComboBoxStyles>;\r\n  selectedOption: IComboBoxOption;\r\n  caseOptions: IComboBoxOption[];\r\n  setSelectedOption: (option: IComboBoxOption) => void;\r\n  disabled?: boolean;\r\n  domain: string;\r\n}\r\n\r\nfunction CaseFilePicker({\r\n  label,\r\n  handleComboBoxChange,\r\n  styles,\r\n  showErrorMessage,\r\n  selectedOption,\r\n  caseOptions,\r\n  setSelectedOption,\r\n  disabled = false,\r\n  // TEMP: Domain will be handled differently\r\n  domain,\r\n  // ...rest\r\n}: CaseControlProps): JSX.Element {\r\n  const onChangeValue = async (input: string) => {\r\n    const numValue = input.replace(/\\D/g, \"\");\r\n    const formattedValue = CaseFileUtils.formatCaseYear(numValue);\r\n    let caseData = await CaseFileService.getCase(domain, numValue);\r\n\r\n    if (caseData && caseData.length > 0) {\r\n      const fullText = `${formattedValue} - ${caseData[0].akt_name}`;\r\n      const options = [{ key: numValue, text: fullText }];\r\n      comboBoxRef?.current?.focus(true);\r\n      handleComboBoxChange(options);\r\n    } else {\r\n      caseData = await CaseFileService.getCaseByName(domain, input);\r\n      if (!caseData || caseData.length === 0) {\r\n        // showErrorMessage(\r\n        //   t(\"FULL_TEXT_SEARCH.SUBMISSION_ERRORS.NO_SEARCH_RESULTS\")\r\n        // );\r\n        showErrorMessage(\"Es gibt keine Suchergebnisse\"); // TEMP\r\n      } else {\r\n        const options = caseData.map((item) => ({\r\n          key: CaseFileUtils.formatCaseYear(item.akt_nr || \"\"),\r\n          text: `${CaseFileUtils.formatCaseYear(item.akt_nr || \"\")} - ${item.akt_name}`,\r\n        }));\r\n        comboBoxRef?.current?.focus(true);\r\n        handleComboBoxChange(options);\r\n      }\r\n    }\r\n  };\r\n\r\n  const initialStyle = Object.assign(styles || {});\r\n\r\n  // Update styles to include the background color\r\n  const comboBoxStyles: Partial<IComboBoxStyles> = {\r\n    ...initialStyle, // Spread existing styles\r\n    root: {\r\n      ...initialStyle.root, // Spread existing container styles\r\n      backgroundColor: \"#ffffd0\", // Add the background color\r\n    },\r\n    input: {\r\n      ...initialStyle.input, // Spread existing container styles\r\n      backgroundColor: \"#ffffd0\",\r\n    },\r\n  };\r\n\r\n  const comboBoxRef = React.useRef<IComboBox>(null);\r\n\r\n  return (\r\n    <ComboBox\r\n      componentRef={comboBoxRef}\r\n      allowFreeform\r\n      label={label}\r\n      onChange={(\r\n        event: FormEvent<IComboBox>,\r\n        _option,\r\n        _index,\r\n        value?: string\r\n      ) => {\r\n        console.log(event);\r\n        if (event && value) {\r\n          onChangeValue(value);\r\n        }\r\n      }}\r\n      onItemClick={(_, option?: IComboBoxOption) => {\r\n        if (option) {\r\n          setSelectedOption(option);\r\n        }\r\n      }}\r\n      styles={comboBoxStyles}\r\n      options={caseOptions}\r\n      selectedKey={selectedOption ? selectedOption.key : undefined}\r\n      useComboBoxAsMenuWidth\r\n      disabled={disabled}\r\n      // {...rest}\r\n    />\r\n  );\r\n}\r\n\r\nCaseFilePicker.defaultProps = {\r\n  disabled: false,\r\n};\r\n\r\nexport default CaseFilePicker;\r\n"],"names":["CaseFilePicker","label","handleComboBoxChange","styles","showErrorMessage","selectedOption","caseOptions","setSelectedOption","disabled","domain","onChangeValue","input","numValue","formattedValue","CaseFileUtils","caseData","CaseFileService","fullText","options","_a","comboBoxRef","item","_b","initialStyle","comboBoxStyles","React","jsx","ComboBox","event","_option","_index","value","_","option"],"mappings":";;;;;;AAuBA,SAASA,EAAe;AAAA,EACtB,OAAAC;AAAA,EACA,sBAAAC;AAAA,EACA,QAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,gBAAAC;AAAA,EACA,aAAAC;AAAA,EACA,mBAAAC;AAAA,EACA,UAAAC,IAAW;AAAA;AAAA,EAEX,QAAAC;AAAA;AAEF,GAAkC;AAC1B,QAAAC,IAAgB,OAAOC,MAAkB;;AAC7C,UAAMC,IAAWD,EAAM,QAAQ,OAAO,EAAE,GAClCE,IAAiBC,EAAc,eAAeF,CAAQ;AAC5D,QAAIG,IAAW,MAAMC,EAAgB,QAAQP,GAAQG,CAAQ;AAEzD,QAAAG,KAAYA,EAAS,SAAS,GAAG;AACnC,YAAME,IAAW,GAAGJ,CAAc,MAAME,EAAS,CAAC,EAAE,QAAQ,IACtDG,IAAU,CAAC,EAAE,KAAKN,GAAU,MAAMK,GAAU;AACrC,OAAAE,IAAAC,KAAA,gBAAAA,EAAA,YAAA,QAAAD,EAAS,MAAM,KAC5BjB,EAAqBgB,CAAO;AAAA,IAAA,WAE5BH,IAAW,MAAMC,EAAgB,cAAcP,GAAQE,CAAK,GACxD,CAACI,KAAYA,EAAS,WAAW;AAInC,MAAAX,EAAiB,8BAA8B;AAAA,SAC1C;AACL,YAAMc,IAAUH,EAAS,IAAI,CAACM,OAAU;AAAA,QACtC,KAAKP,EAAc,eAAeO,EAAK,UAAU,EAAE;AAAA,QACnD,MAAM,GAAGP,EAAc,eAAeO,EAAK,UAAU,EAAE,CAAC,MAAMA,EAAK,QAAQ;AAAA,MAC3E,EAAA;AACW,OAAAC,IAAAF,KAAA,gBAAAA,EAAA,YAAA,QAAAE,EAAS,MAAM,KAC5BpB,EAAqBgB,CAAO;AAAA,IAC9B;AAAA,EACF,GAGIK,IAAe,OAAO,OAAOpB,KAAU,CAAE,CAAA,GAGzCqB,IAA2C;AAAA,IAC/C,GAAGD;AAAA;AAAA,IACH,MAAM;AAAA,MACJ,GAAGA,EAAa;AAAA;AAAA,MAChB,iBAAiB;AAAA;AAAA,IACnB;AAAA,IACA,OAAO;AAAA,MACL,GAAGA,EAAa;AAAA;AAAA,MAChB,iBAAiB;AAAA,IACnB;AAAA,EAAA,GAGIH,IAAcK,EAAM,OAAkB,IAAI;AAG9C,SAAAC,gBAAAA,EAAA;AAAA,IAACC;AAAA,IAAA;AAAA,MACC,cAAcP;AAAA,MACd,eAAa;AAAA,MACb,OAAAnB;AAAA,MACA,UAAU,CACR2B,GACAC,GACAC,GACAC,MACG;AACH,gBAAQ,IAAIH,CAAK,GACbA,KAASG,KACXrB,EAAcqB,CAAK;AAAA,MAEvB;AAAA,MACA,aAAa,CAACC,GAAGC,MAA6B;AAC5C,QAAIA,KACF1B,EAAkB0B,CAAM;AAAA,MAE5B;AAAA,MACA,QAAQT;AAAA,MACR,SAASlB;AAAA,MACT,aAAaD,IAAiBA,EAAe,MAAM;AAAA,MACnD,wBAAsB;AAAA,MACtB,UAAAG;AAAA,IAAA;AAAA,EAAA;AAIN;AAEAR,EAAe,eAAe;AAAA,EAC5B,UAAU;AACZ;"}