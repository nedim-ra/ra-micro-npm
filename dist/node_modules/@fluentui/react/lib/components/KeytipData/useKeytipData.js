import { __assign as s, __spreadArray as d } from "../../../../../tslib/tslib.es6.js";
import * as p from "react";
import { KeytipManager as f } from "../../utilities/keytips/KeytipManager.js";
import { useIsomorphicLayoutEffect as u } from "../../../../utilities/lib/useIsomorphicLayoutEffect.js";
import { mergeAriaAttributeValues as c } from "../../../../utilities/lib/aria.js";
import { getAriaDescribedBy as y, mergeOverflows as v, sequencesToID as m } from "../../utilities/keytips/KeytipUtils.js";
import { useConst as l } from "../../../../react-hooks/lib/useConst.js";
import { usePrevious as k } from "../../../../react-hooks/lib/usePrevious.js";
function B(r) {
  var a = p.useRef(), e = r.keytipProps ? s({ disabled: r.disabled }, r.keytipProps) : void 0, i = l(f.getInstance()), t = k(r);
  u(function() {
    a.current && e && ((t == null ? void 0 : t.keytipProps) !== r.keytipProps || (t == null ? void 0 : t.disabled) !== r.disabled) && i.update(e, a.current);
  }), u(function() {
    return e && (a.current = i.register(e)), function() {
      e && i.unregister(e, a.current);
    };
  }, []);
  var n = {
    ariaDescribedBy: void 0,
    keytipId: void 0
  };
  return e && (n = b(i, e, r.ariaDescribedBy)), n;
}
function b(r, a, e) {
  var i = r.addParentOverflow(a), t = c(e, y(i.keySequences)), n = d([], i.keySequences, !0);
  i.overflowSetSequence && (n = v(n, i.overflowSetSequence));
  var o = m(n);
  return {
    ariaDescribedBy: t,
    keytipId: o
  };
}
export {
  B as useKeytipData
};
//# sourceMappingURL=useKeytipData.js.map
