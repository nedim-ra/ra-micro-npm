import { __assign as V } from "../../../../../tslib/tslib.es6.js";
import * as c from "react";
import { ImageLoadState as o, ImageCoverStyle as g, ImageFit as d } from "./Image.types.js";
import { getNativeProps as x, imgProperties as P } from "../../../../utilities/lib/properties.js";
import { classNamesFunction as k } from "../../../../utilities/lib/classNamesFunction.js";
import { useIsomorphicLayoutEffect as z } from "../../../../utilities/lib/useIsomorphicLayoutEffect.js";
import { useMergedRefs as H } from "../../../../react-hooks/lib/useMergedRefs.js";
var W = /* @__PURE__ */ k(), B = /\.svg$/i, G = "fabricImage";
function X(e, n) {
  var i = e.onLoadingStateChange, r = e.onLoad, t = e.onError, a = e.src, m = c.useState(o.notLoaded), u = m[0], l = m[1];
  z(function() {
    l(o.notLoaded);
  }, [a]), c.useEffect(function() {
    if (u === o.notLoaded) {
      var s = n.current ? a && n.current.naturalWidth > 0 && n.current.naturalHeight > 0 || n.current.complete && B.test(a) : !1;
      s && l(o.loaded);
    }
  }), c.useEffect(function() {
    i == null || i(u);
  }, [u]);
  var f = c.useCallback(function(s) {
    r == null || r(s), a && l(o.loaded);
  }, [a, r]), h = c.useCallback(function(s) {
    t == null || t(s), l(o.error);
  }, [t]);
  return [u, f, h];
}
var K = /* @__PURE__ */ c.forwardRef(function(e, n) {
  var i = c.useRef(), r = c.useRef(), t = X(e, r), a = t[0], m = t[1], u = t[2], l = x(e, P, [
    "width",
    "height"
  ]), f = e.src, h = e.alt, s = e.width, C = e.height, L = e.shouldFadeIn, I = L === void 0 ? !0 : L, y = e.shouldStartVisible, F = e.className, v = e.imageFit, N = e.role, b = e.maximizeFrame, E = e.styles, w = e.theme, R = e.loading, _ = M(e, a, r, i), S = W(E, {
    theme: w,
    className: F,
    width: s,
    height: C,
    maximizeFrame: b,
    shouldFadeIn: I,
    shouldStartVisible: y,
    isLoaded: a === o.loaded || a === o.notLoaded && e.shouldStartVisible,
    isLandscape: _ === g.landscape,
    isCenter: v === d.center,
    isCenterContain: v === d.centerContain,
    isCenterCover: v === d.centerCover,
    isContain: v === d.contain,
    isCover: v === d.cover,
    isNone: v === d.none,
    isError: a === o.error,
    isNotImageFit: v === void 0
  });
  return c.createElement(
    "div",
    { className: S.root, style: { width: s, height: C }, ref: i },
    c.createElement("img", V({}, l, { onLoad: m, onError: u, key: G + e.src || "", className: S.image, ref: H(r, n), src: f, alt: h, role: N, loading: R }))
  );
});
K.displayName = "ImageBase";
function M(e, n, i, r) {
  var t = c.useRef(n), a = c.useRef();
  return (a === void 0 || t.current === o.notLoaded && n === o.loaded) && (a.current = Y(e, n, i, r)), t.current = n, a.current;
}
function Y(e, n, i, r) {
  var t = e.imageFit, a = e.width, m = e.height;
  if (e.coverStyle !== void 0)
    return e.coverStyle;
  if (n === o.loaded && (t === d.cover || t === d.contain || t === d.centerContain || t === d.centerCover) && i.current && r.current) {
    var u = void 0;
    typeof a == "number" && typeof m == "number" && t !== d.centerContain && t !== d.centerCover ? u = a / m : u = r.current.clientWidth / r.current.clientHeight;
    var l = i.current.naturalWidth / i.current.naturalHeight;
    if (l > u)
      return g.landscape;
  }
  return g.portrait;
}
export {
  K as ImageBase
};
//# sourceMappingURL=Image.base.js.map
