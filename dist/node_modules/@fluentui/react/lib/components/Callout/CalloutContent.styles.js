import { getGlobalClassNames as C } from "../../../../style-utilities/lib/styles/getGlobalClassNames.js";
import "../../../../style-utilities/lib/index.js";
import { ZIndexes as h } from "../../../../style-utilities/lib/styles/zIndexes.js";
import { focusClear as f } from "../../../../style-utilities/lib/styles/getFocusStyle.js";
import { HighContrastSelector as k } from "../../../../style-utilities/lib/styles/CommonStyles.js";
function g(o) {
  return {
    height: o,
    width: o
  };
}
var v = {
  container: "ms-Callout-container",
  root: "ms-Callout",
  beak: "ms-Callout-beak",
  beakCurtain: "ms-Callout-beakCurtain",
  calloutMain: "ms-Callout-main"
}, M = function(o) {
  var i, t = o.theme, b = o.className, s = o.overflowYHidden, n = o.calloutWidth, c = o.beakWidth, a = o.backgroundColor, d = o.calloutMaxWidth, u = o.calloutMinWidth, m = o.doNotLayer, e = C(v, t), l = t.semanticColors, r = t.effects;
  return {
    container: [
      e.container,
      {
        position: "relative"
      }
    ],
    root: [
      e.root,
      t.fonts.medium,
      {
        position: "absolute",
        display: "flex",
        zIndex: m ? h.Layer : void 0,
        boxSizing: "border-box",
        borderRadius: r.roundedCorner2,
        boxShadow: r.elevation16,
        selectors: (i = {}, i[k] = {
          borderWidth: 1,
          borderStyle: "solid",
          borderColor: "WindowText"
        }, i)
      },
      f(),
      b,
      !!n && { width: n },
      !!d && { maxWidth: d },
      !!u && { minWidth: u }
    ],
    beak: [
      e.beak,
      {
        position: "absolute",
        backgroundColor: l.menuBackground,
        boxShadow: "inherit",
        border: "inherit",
        boxSizing: "border-box",
        transform: "rotate(45deg)"
      },
      g(c),
      a && {
        backgroundColor: a
      }
    ],
    beakCurtain: [
      e.beakCurtain,
      {
        position: "absolute",
        top: 0,
        right: 0,
        bottom: 0,
        left: 0,
        backgroundColor: l.menuBackground,
        borderRadius: r.roundedCorner2
      }
    ],
    calloutMain: [
      e.calloutMain,
      {
        backgroundColor: l.menuBackground,
        overflowX: "hidden",
        overflowY: "auto",
        position: "relative",
        width: "100%",
        borderRadius: r.roundedCorner2
      },
      s && {
        overflowY: "hidden"
      },
      a && {
        backgroundColor: a
      }
    ]
  };
};
export {
  M as getStyles
};
//# sourceMappingURL=CalloutContent.styles.js.map
