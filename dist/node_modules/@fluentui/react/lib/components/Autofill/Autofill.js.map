{"version":3,"file":"Autofill.js","sources":["../../../../../../../node_modules/@fluentui/react/lib/components/Autofill/Autofill.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Async, getDocument, getNativeProps, initializeComponentRef, inputProperties, isIE11, KeyCodes, } from '../../Utilities';\nimport { WindowContext } from '@fluentui/react-window-provider';\nvar SELECTION_FORWARD = 'forward';\nvar SELECTION_BACKWARD = 'backward';\n/**\n * {@docCategory Autofill}\n */\nexport var Autofill = /** @class */ (function (_super) {\n    __extends(Autofill, _super);\n    function Autofill(props) {\n        var _this = _super.call(this, props) || this;\n        _this._inputElement = React.createRef();\n        _this._autoFillEnabled = true;\n        // Composition events are used when the character/text requires several keystrokes to be completed.\n        // Some examples of this are mobile text input and languages like Japanese or Arabic.\n        // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n        _this._onCompositionStart = function (ev) {\n            _this.setState({ isComposing: true });\n            _this._autoFillEnabled = false;\n        };\n        // Composition events are used when the character/text requires several keystrokes to be completed.\n        // Some examples of this are mobile text input and languages like Japanese or Arabic.\n        // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n        _this._onCompositionUpdate = function () {\n            if (isIE11()) {\n                _this._updateValue(_this._getCurrentInputValue(), true);\n            }\n        };\n        // Composition events are used when the character/text requires several keystrokes to be completed.\n        // Some examples of this are mobile text input and languages like Japanese or Arabic.\n        // Find out more at https://developer.mozilla.org/en-US/docs/Web/Events/compositionstart\n        _this._onCompositionEnd = function (ev) {\n            var inputValue = _this._getCurrentInputValue();\n            _this._tryEnableAutofill(inputValue, _this.value, false, true);\n            _this.setState({ isComposing: false });\n            // Due to timing, this needs to be async, otherwise no text will be selected.\n            _this._async.setTimeout(function () {\n                // it's technically possible that the value of isComposing is reset during this timeout,\n                // so explicitly trigger this with composing=true here, since it is supposed to be the\n                // update for composition end\n                _this._updateValue(_this._getCurrentInputValue(), false);\n            }, 0);\n        };\n        _this._onClick = function () {\n            if (_this.value && _this.value !== '' && _this._autoFillEnabled) {\n                _this._autoFillEnabled = false;\n            }\n        };\n        _this._onKeyDown = function (ev) {\n            if (_this.props.onKeyDown) {\n                _this.props.onKeyDown(ev);\n            }\n            // If the event is actively being composed, then don't alert autofill.\n            // Right now typing does not have isComposing, once that has been fixed any should be removed.\n            if (!ev.nativeEvent.isComposing) {\n                // eslint-disable-next-line deprecation/deprecation\n                switch (ev.which) {\n                    case KeyCodes.backspace:\n                        _this._autoFillEnabled = false;\n                        break;\n                    case KeyCodes.left:\n                    case KeyCodes.right:\n                        if (_this._autoFillEnabled) {\n                            _this.setState(function (prev) { return ({\n                                inputValue: _this.props.suggestedDisplayValue || prev.inputValue,\n                            }); });\n                            _this._autoFillEnabled = false;\n                        }\n                        break;\n                    default:\n                        if (!_this._autoFillEnabled) {\n                            // eslint-disable-next-line deprecation/deprecation\n                            if (_this.props.enableAutofillOnKeyPress.indexOf(ev.which) !== -1) {\n                                _this._autoFillEnabled = true;\n                            }\n                        }\n                        break;\n                }\n            }\n        };\n        _this._onInputChanged = function (ev) {\n            var value = _this._getCurrentInputValue(ev);\n            if (!_this.state.isComposing) {\n                _this._tryEnableAutofill(value, _this.value, ev.nativeEvent.isComposing);\n            }\n            // If it is not IE11 and currently composing, update the value\n            if (!(isIE11() && _this.state.isComposing)) {\n                var nativeEventComposing = ev.nativeEvent.isComposing;\n                var isComposing = nativeEventComposing === undefined ? _this.state.isComposing : nativeEventComposing;\n                _this._updateValue(value, isComposing);\n            }\n        };\n        _this._onChanged = function () {\n            // Swallow this event, we don't care about it\n            // We must provide it because React PropTypes marks it as required, but onInput serves the correct purpose\n            return;\n        };\n        /**\n         * Updates the current input value as well as getting a new display value.\n         * @param newValue - The new value from the input\n         */\n        _this._updateValue = function (newValue, composing) {\n            var _a;\n            // Only proceed if the value is nonempty and is different from the old value\n            // This is to work around the fact that, in IE 11, inputs with a placeholder fire an onInput event on focus\n            if (!newValue && newValue === _this.value) {\n                return;\n            }\n            // eslint-disable-next-line deprecation/deprecation\n            var onInputChange = (_a = _this.props, _a.onInputChange), onInputValueChange = _a.onInputValueChange;\n            if (onInputChange) {\n                newValue = (onInputChange === null || onInputChange === void 0 ? void 0 : onInputChange(newValue, composing)) || '';\n            }\n            _this.setState({ inputValue: newValue }, function () { return onInputValueChange === null || onInputValueChange === void 0 ? void 0 : onInputValueChange(newValue, composing); });\n        };\n        initializeComponentRef(_this);\n        _this._async = new Async(_this);\n        _this.state = {\n            inputValue: props.defaultVisibleValue || '',\n            isComposing: false,\n        };\n        return _this;\n    }\n    Autofill.getDerivedStateFromProps = function (props, state) {\n        // eslint-disable-next-line deprecation/deprecation\n        if (props.updateValueInWillReceiveProps) {\n            // eslint-disable-next-line deprecation/deprecation\n            var updatedInputValue = props.updateValueInWillReceiveProps();\n            // Don't update if we have a null value or the value isn't changing\n            // the value should still update if an empty string is passed in\n            if (updatedInputValue !== null && updatedInputValue !== state.inputValue && !state.isComposing) {\n                return __assign(__assign({}, state), { inputValue: updatedInputValue });\n            }\n        }\n        return null;\n    };\n    Object.defineProperty(Autofill.prototype, \"cursorLocation\", {\n        get: function () {\n            if (this._inputElement.current) {\n                var inputElement = this._inputElement.current;\n                if (inputElement.selectionDirection !== SELECTION_FORWARD) {\n                    return inputElement.selectionEnd;\n                }\n                else {\n                    return inputElement.selectionStart;\n                }\n            }\n            else {\n                return -1;\n            }\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Autofill.prototype, \"isValueSelected\", {\n        get: function () {\n            return Boolean(this.inputElement && this.inputElement.selectionStart !== this.inputElement.selectionEnd);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Autofill.prototype, \"value\", {\n        get: function () {\n            return this._getControlledValue() || this.state.inputValue || '';\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Autofill.prototype, \"selectionStart\", {\n        get: function () {\n            return this._inputElement.current ? this._inputElement.current.selectionStart : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Autofill.prototype, \"selectionEnd\", {\n        get: function () {\n            return this._inputElement.current ? this._inputElement.current.selectionEnd : -1;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Autofill.prototype, \"inputElement\", {\n        get: function () {\n            return this._inputElement.current;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Autofill.prototype.componentDidUpdate = function (_, _1, cursor) {\n        var _a;\n        var _b;\n        var suggestedDisplayValue = (_a = this.props, _a.suggestedDisplayValue), shouldSelectFullInputValueInComponentDidUpdate = _a.shouldSelectFullInputValueInComponentDidUpdate, preventValueSelection = _a.preventValueSelection;\n        var differenceIndex = 0;\n        if (preventValueSelection) {\n            return;\n        }\n        var document = ((_b = this.context) === null || _b === void 0 ? void 0 : _b.window.document) || getDocument(this._inputElement.current);\n        var isFocused = this._inputElement.current && this._inputElement.current === (document === null || document === void 0 ? void 0 : document.activeElement);\n        if (isFocused &&\n            this._autoFillEnabled &&\n            this.value &&\n            suggestedDisplayValue &&\n            _doesTextStartWith(suggestedDisplayValue, this.value)) {\n            var shouldSelectFullRange = false;\n            if (shouldSelectFullInputValueInComponentDidUpdate) {\n                shouldSelectFullRange = shouldSelectFullInputValueInComponentDidUpdate();\n            }\n            if (shouldSelectFullRange) {\n                this._inputElement.current.setSelectionRange(0, suggestedDisplayValue.length, SELECTION_BACKWARD);\n            }\n            else {\n                while (differenceIndex < this.value.length &&\n                    this.value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {\n                    differenceIndex++;\n                }\n                if (differenceIndex > 0) {\n                    this._inputElement.current.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\n                }\n            }\n        }\n        else if (this._inputElement.current) {\n            if (cursor !== null && !this._autoFillEnabled && !this.state.isComposing) {\n                this._inputElement.current.setSelectionRange(cursor.start, cursor.end, cursor.dir);\n            }\n        }\n    };\n    Autofill.prototype.componentWillUnmount = function () {\n        this._async.dispose();\n    };\n    Autofill.prototype.render = function () {\n        var nativeProps = getNativeProps(this.props, inputProperties);\n        var style = __assign(__assign({}, this.props.style), { fontFamily: 'inherit' });\n        return (React.createElement(\"input\", __assign({ autoCapitalize: \"off\", autoComplete: \"off\", \"aria-autocomplete\": 'both' }, nativeProps, { style: style, ref: this._inputElement, value: this._getDisplayValue(), onCompositionStart: this._onCompositionStart, onCompositionUpdate: this._onCompositionUpdate, onCompositionEnd: this._onCompositionEnd, \n            // TODO (Fabric 8?) - switch to calling only onChange. See notes in TextField._onInputChange.\n            onChange: this._onChanged, onInput: this._onInputChanged, onKeyDown: this._onKeyDown, onClick: this.props.onClick ? this.props.onClick : this._onClick, \"data-lpignore\": true })));\n    };\n    Autofill.prototype.focus = function () {\n        this._inputElement.current && this._inputElement.current.focus();\n    };\n    Autofill.prototype.clear = function () {\n        this._autoFillEnabled = true;\n        this._updateValue('', false);\n        this._inputElement.current && this._inputElement.current.setSelectionRange(0, 0);\n    };\n    Autofill.prototype.getSnapshotBeforeUpdate = function () {\n        var _a, _b;\n        var inel = this._inputElement.current;\n        if (inel && inel.selectionStart !== this.value.length) {\n            return {\n                start: (_a = inel.selectionStart) !== null && _a !== void 0 ? _a : inel.value.length,\n                end: (_b = inel.selectionEnd) !== null && _b !== void 0 ? _b : inel.value.length,\n                dir: inel.selectionDirection || 'backward' || 'none',\n            };\n        }\n        return null;\n    };\n    Autofill.prototype._getCurrentInputValue = function (ev) {\n        if (ev && ev.target && ev.target.value) {\n            return ev.target.value;\n        }\n        else if (this.inputElement && this.inputElement.value) {\n            return this.inputElement.value;\n        }\n        else {\n            return '';\n        }\n    };\n    /**\n     * Attempts to enable autofill. Whether or not autofill is enabled depends on the input value,\n     * whether or not any text is selected, and only if the new input value is longer than the old input value.\n     * Autofill should never be set to true if the value is composing. Once compositionEnd is called, then\n     * it should be completed.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent for more information on composition.\n     * @param newValue - new input value\n     * @param oldValue - old input value\n     * @param isComposing - if true then the text is actively being composed and it has not completed.\n     * @param isComposed - if the text is a composed text value.\n     */\n    Autofill.prototype._tryEnableAutofill = function (newValue, oldValue, isComposing, isComposed) {\n        if (!isComposing &&\n            newValue &&\n            this._inputElement.current &&\n            this._inputElement.current.selectionStart === newValue.length &&\n            !this._autoFillEnabled &&\n            (newValue.length > oldValue.length || isComposed)) {\n            this._autoFillEnabled = true;\n        }\n    };\n    Autofill.prototype._getDisplayValue = function () {\n        if (this._autoFillEnabled) {\n            return _getDisplayValue(this.value, this.props.suggestedDisplayValue);\n        }\n        return this.value;\n    };\n    Autofill.prototype._getControlledValue = function () {\n        var value = this.props.value;\n        if (value === undefined || typeof value === 'string') {\n            return value;\n        }\n        // eslint-disable-next-line no-console\n        console.warn(\"props.value of Autofill should be a string, but it is \".concat(value, \" with type of \").concat(typeof value));\n        return value.toString();\n    };\n    Autofill.defaultProps = {\n        enableAutofillOnKeyPress: [KeyCodes.down, KeyCodes.up],\n    };\n    // need to check WindowContext to get the provided document\n    Autofill.contextType = WindowContext;\n    return Autofill;\n}(React.Component));\n/**\n * Returns a string that should be used as the display value.\n * It evaluates this based on whether or not the suggested value starts with the input value\n * and whether or not autofill is enabled.\n * @param inputValue - the value that the input currently has.\n * @param suggestedDisplayValue - the possible full value\n */\nfunction _getDisplayValue(inputValue, suggestedDisplayValue) {\n    var displayValue = inputValue;\n    if (suggestedDisplayValue && inputValue && _doesTextStartWith(suggestedDisplayValue, displayValue)) {\n        displayValue = suggestedDisplayValue;\n    }\n    return displayValue;\n}\nfunction _doesTextStartWith(text, startWith) {\n    if (!text || !startWith) {\n        return false;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        for (var _i = 0, _a = [text, startWith]; _i < _a.length; _i++) {\n            var val = _a[_i];\n            if (typeof val !== 'string') {\n                throw new Error(\"\".concat(Autofill.name\n                // eslint-disable-next-line @fluentui/max-len\n                , \" received non-string value \\\"\").concat(val, \"\\\" of type \").concat(typeof val, \" from either input's value or suggestedDisplayValue\"));\n            }\n        }\n    }\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\n}\n//# sourceMappingURL=Autofill.js.map"],"names":["SELECTION_FORWARD","SELECTION_BACKWARD","Autofill","_super","__extends","props","_this","React","ev","isIE11","inputValue","KeyCodes","prev","value","nativeEventComposing","isComposing","newValue","composing","_a","onInputChange","onInputValueChange","initializeComponentRef","Async","state","updatedInputValue","__assign","inputElement","_","_1","cursor","_b","suggestedDisplayValue","shouldSelectFullInputValueInComponentDidUpdate","preventValueSelection","differenceIndex","document","getDocument","isFocused","_doesTextStartWith","shouldSelectFullRange","nativeProps","getNativeProps","inputProperties","style","inel","oldValue","isComposed","_getDisplayValue","WindowContext","displayValue","text","startWith","_i","val"],"mappings":"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","x_google_ignoreList":[0]}