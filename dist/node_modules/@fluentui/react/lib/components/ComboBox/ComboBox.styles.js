import { __assign as n } from "../../../../../tslib/tslib.es6.js";
import { memoizeFunction as g } from "../../../../utilities/lib/memoize.js";
import "../../../../style-utilities/lib/index.js";
import { concatStyleSets as B } from "../../../../merge-styles/lib/concatStyleSets.js";
import { hiddenContentStyle as z } from "../../../../style-utilities/lib/styles/hiddenContentStyle.js";
import { HighContrastSelector as l, getHighContrastNoAdjustStyle as C } from "../../../../style-utilities/lib/styles/CommonStyles.js";
import { getFocusStyle as O, getInputFocusStyle as A } from "../../../../style-utilities/lib/styles/getFocusStyle.js";
import { getPlaceholderStyles as k } from "../../../../style-utilities/lib/styles/getPlaceholderStyles.js";
import { FontWeights as R } from "../../../../theme/lib/fonts/FluentFonts.js";
var m, f, G = 32, L = 30, W = 32, S = 36, y = /* @__PURE__ */ g(function(r) {
  var s, d = r.semanticColors;
  return {
    backgroundColor: d.disabledBackground,
    color: d.disabledText,
    cursor: "default",
    selectors: (s = {
      ":after": {
        borderColor: d.disabledBackground
      }
    }, s[l] = {
      color: "GrayText",
      selectors: {
        ":after": {
          borderColor: "GrayText"
        }
      }
    }, s)
  };
}), w = {
  selectors: (m = {}, m[l] = /* @__PURE__ */ n({ backgroundColor: "Highlight", borderColor: "Highlight", color: "HighlightText" }, C()), m)
}, H = {
  selectors: (f = {}, f[l] = /* @__PURE__ */ n({ color: "WindowText", backgroundColor: "Window" }, C()), f)
}, V = /* @__PURE__ */ g(function(r, s, d, c, t, b) {
  var e, i = r.palette, a = r.semanticColors, o = {
    textHoveredColor: a.menuItemTextHovered,
    textSelectedColor: i.neutralDark,
    textDisabledColor: a.disabledText,
    backgroundHoveredColor: a.menuItemBackgroundHovered,
    backgroundPressedColor: a.menuItemBackgroundPressed
  }, p = {
    root: [
      r.fonts.medium,
      {
        backgroundColor: c ? o.backgroundHoveredColor : "transparent",
        boxSizing: "border-box",
        cursor: "pointer",
        display: t ? "none" : "block",
        width: "100%",
        height: "auto",
        minHeight: S,
        lineHeight: "20px",
        padding: "0 8px",
        position: "relative",
        borderWidth: "1px",
        borderStyle: "solid",
        borderColor: "transparent",
        borderRadius: 0,
        wordWrap: "break-word",
        overflowWrap: "break-word",
        textAlign: "left",
        selectors: n(n((e = {}, e[l] = {
          border: "none",
          borderColor: "Background"
        }, e), !t && {
          "&.ms-Checkbox": {
            display: "flex",
            alignItems: "center"
          }
        }), { "&.ms-Button--command:hover:active": {
          backgroundColor: o.backgroundPressedColor
        }, ".ms-Checkbox-label": {
          width: "100%"
        } })
      },
      b ? [
        {
          backgroundColor: "transparent",
          color: o.textSelectedColor,
          selectors: {
            ":hover": [
              {
                backgroundColor: o.backgroundHoveredColor
              },
              w
            ]
          }
        },
        O(r, { inset: -1, isFocusedOnly: !1 }),
        w
      ] : []
    ],
    rootHovered: {
      backgroundColor: o.backgroundHoveredColor,
      color: o.textHoveredColor
    },
    rootFocused: {
      backgroundColor: o.backgroundHoveredColor
    },
    rootDisabled: {
      color: o.textDisabledColor,
      cursor: "default"
    },
    optionText: {
      overflow: "hidden",
      whiteSpace: "nowrap",
      textOverflow: "ellipsis",
      minWidth: "0px",
      maxWidth: "100%",
      wordWrap: "break-word",
      overflowWrap: "break-word",
      display: "inline-block"
    },
    optionTextWrapper: {
      maxWidth: "100%",
      display: "flex",
      alignItems: "center"
    }
  };
  return B(p, s, d);
}), X = /* @__PURE__ */ g(function(r, s) {
  var d, c, t = r.semanticColors, b = r.fonts, e = {
    buttonTextColor: t.bodySubtext,
    buttonTextHoveredCheckedColor: t.buttonTextChecked,
    buttonBackgroundHoveredColor: t.listItemBackgroundHovered,
    buttonBackgroundCheckedColor: t.listItemBackgroundChecked,
    buttonBackgroundCheckedHoveredColor: t.listItemBackgroundCheckedHovered
  }, i = {
    selectors: (d = {}, d[l] = n({ backgroundColor: "Highlight", borderColor: "Highlight", color: "HighlightText" }, C()), d)
  }, a = {
    root: {
      color: e.buttonTextColor,
      fontSize: b.small.fontSize,
      position: "absolute",
      top: 0,
      height: "100%",
      lineHeight: L,
      width: W,
      textAlign: "center",
      cursor: "default",
      selectors: (c = {}, c[l] = n({ backgroundColor: "ButtonFace", borderColor: "ButtonText", color: "ButtonText" }, C()), c)
    },
    icon: {
      fontSize: b.small.fontSize
    },
    rootHovered: [
      {
        backgroundColor: e.buttonBackgroundHoveredColor,
        color: e.buttonTextHoveredCheckedColor,
        cursor: "pointer"
      },
      i
    ],
    rootPressed: [
      {
        backgroundColor: e.buttonBackgroundCheckedColor,
        color: e.buttonTextHoveredCheckedColor
      },
      i
    ],
    rootChecked: [
      {
        backgroundColor: e.buttonBackgroundCheckedColor,
        color: e.buttonTextHoveredCheckedColor
      },
      i
    ],
    rootCheckedHovered: [
      {
        backgroundColor: e.buttonBackgroundCheckedHoveredColor,
        color: e.buttonTextHoveredCheckedColor
      },
      i
    ],
    rootDisabled: [
      y(r),
      {
        position: "absolute"
      }
    ]
  };
  return B(a, s);
}), Y = /* @__PURE__ */ g(function(r, s, d) {
  var c, t, b, e, i, a, o = r.semanticColors, p = r.fonts, h = r.effects, u = {
    textColor: o.inputText,
    borderColor: o.inputBorder,
    borderHoveredColor: o.inputBorderHovered,
    borderPressedColor: o.inputFocusBorderAlt,
    borderFocusedColor: o.inputFocusBorderAlt,
    backgroundColor: o.inputBackground,
    erroredColor: o.errorText
  }, T = {
    headerTextColor: o.menuHeader,
    dividerBorderColor: o.bodyDivider
  }, v = {
    selectors: (c = {}, c[l] = {
      color: "GrayText"
    }, c)
  }, F = [
    {
      color: o.inputPlaceholderText
    },
    v
  ], _ = [
    {
      color: o.inputTextHovered
    },
    v
  ], D = [
    {
      color: o.disabledText
    },
    v
  ], x = n(n({ color: "HighlightText", backgroundColor: "Window" }, C()), { selectors: {
    ":after": {
      borderColor: "Highlight"
    }
  } }), I = A(u.borderPressedColor, h.roundedCorner2, "border", 0), P = {
    container: {},
    label: {},
    labelDisabled: {},
    root: [
      r.fonts.medium,
      {
        boxShadow: "none",
        marginLeft: "0",
        paddingRight: W,
        paddingLeft: 9,
        color: u.textColor,
        position: "relative",
        outline: "0",
        userSelect: "none",
        backgroundColor: u.backgroundColor,
        cursor: "text",
        display: "block",
        height: G,
        whiteSpace: "nowrap",
        textOverflow: "ellipsis",
        boxSizing: "border-box",
        selectors: {
          ".ms-Label": {
            display: "inline-block",
            marginBottom: "8px"
          },
          "&.is-open": {
            selectors: (t = {}, t[l] = x, t)
          },
          // setting border using pseudo-element here in order to
          // prevent chevron button to overlap ComboBox border under certain resolutions
          ":after": {
            pointerEvents: "none",
            content: "''",
            position: "absolute",
            left: 0,
            top: 0,
            bottom: 0,
            right: 0,
            borderWidth: "1px",
            borderStyle: "solid",
            borderColor: u.borderColor,
            borderRadius: h.roundedCorner2
          }
        }
      }
    ],
    rootHovered: {
      selectors: (b = {
        ":after": {
          borderColor: u.borderHoveredColor
        },
        ".ms-ComboBox-Input": [
          {
            color: o.inputTextHovered
          },
          k(_),
          H
        ]
      }, b[l] = n(n({ color: "HighlightText", backgroundColor: "Window" }, C()), { selectors: {
        ":after": {
          borderColor: "Highlight"
        }
      } }), b)
    },
    rootPressed: [
      {
        position: "relative",
        selectors: (e = {}, e[l] = x, e)
      }
    ],
    rootFocused: [
      {
        selectors: (i = {
          ".ms-ComboBox-Input": [
            {
              color: o.inputTextHovered
            },
            H
          ]
        }, i[l] = x, i)
      },
      I
    ],
    rootDisabled: y(r),
    rootError: {
      selectors: {
        ":after": {
          borderColor: u.erroredColor
        },
        ":hover:after": {
          borderColor: o.inputBorderHovered
        }
      }
    },
    rootDisallowFreeForm: {},
    input: [
      k(F),
      {
        backgroundColor: u.backgroundColor,
        color: u.textColor,
        boxSizing: "border-box",
        width: "100%",
        height: "100%",
        borderStyle: "none",
        outline: "none",
        font: "inherit",
        textOverflow: "ellipsis",
        padding: "0",
        selectors: {
          "::-ms-clear": {
            display: "none"
          }
        }
      },
      H
    ],
    inputDisabled: [y(r), k(D)],
    errorMessage: [
      r.fonts.small,
      {
        color: u.erroredColor,
        marginTop: "5px"
      }
    ],
    callout: {
      boxShadow: h.elevation8
    },
    optionsContainerWrapper: {
      width: d
    },
    optionsContainer: {
      display: "block"
    },
    screenReaderText: z,
    header: [
      p.medium,
      {
        fontWeight: R.semibold,
        color: T.headerTextColor,
        backgroundColor: "none",
        borderStyle: "none",
        height: S,
        lineHeight: S,
        cursor: "default",
        padding: "0 8px",
        userSelect: "none",
        textAlign: "left",
        selectors: (a = {}, a[l] = n({ color: "GrayText" }, C()), a)
      }
    ],
    divider: {
      height: 1,
      backgroundColor: T.dividerBorderColor
    }
  };
  return B(P, s);
});
export {
  X as getCaretDownButtonStyles,
  V as getOptionStyles,
  Y as getStyles
};
//# sourceMappingURL=ComboBox.styles.js.map
