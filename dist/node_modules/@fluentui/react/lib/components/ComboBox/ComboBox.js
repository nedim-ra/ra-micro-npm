import { __rest as U, __assign as m, __extends as re, __decorate as ie, __spreadArray as L } from "../../../../../tslib/tslib.es6.js";
import * as I from "react";
import { getStyles as oe, getCaretDownButtonStyles as se, getOptionStyles as ae } from "./ComboBox.styles.js";
import { getClassNames as le, getComboBoxOptionClassNames as H } from "./ComboBox.classNames.js";
import { getDocumentEx as z } from "../../utilities/dom.js";
import { shallowCompare as X } from "../../../../utilities/lib/object.js";
import { getPropsWithDefaults as ue } from "../../../../utilities/lib/getPropsWithDefaults.js";
import { getAllSelectedOptions as de } from "../../utilities/selectableOption/SelectableOption.js";
import { getNativeProps as ce, divProperties as pe } from "../../../../utilities/lib/properties.js";
import { SelectableOptionMenuItemType as O } from "../../utilities/selectableOption/SelectableOption.types.js";
import { getId as G } from "../../../../utilities/lib/getId.js";
import { KeyCodes as C } from "../../../../utilities/lib/KeyCodes.js";
import { WindowContext as fe } from "../../../../react-window-provider/lib/WindowProvider.js";
import { getChildren as he } from "../../../../dom-utilities/lib/getChildren.js";
import { focusAsync as _e } from "../../../../utilities/lib/focus.js";
import { Autofill as me } from "../Autofill/Autofill.js";
import { mergeAriaAttributeValues as ge } from "../../../../utilities/lib/aria.js";
import { findElementRecursive as ve } from "../../../../dom-utilities/lib/findElementRecursive.js";
import { DirectionalHint as Ie } from "../../common/DirectionalHint.js";
import { css as be } from "../../../../utilities/lib/css.js";
import { isMac as ye } from "../../../../utilities/lib/osDetector.js";
import { isIOS as Se } from "../../../../utilities/lib/mobileDetector.js";
import { initializeComponentRef as Ce } from "../../../../utilities/lib/initializeComponentRef.js";
import { Async as Oe } from "../../../../utilities/lib/Async.js";
import { EventGroup as xe } from "../../../../utilities/lib/EventGroup.js";
import { warnMutuallyExclusive as Pe } from "../../../../utilities/lib/warn/warnMutuallyExclusive.js";
import { customizable as Ve } from "../../../../utilities/lib/customizations/customizable.js";
import { Checkbox as we } from "../Checkbox/Checkbox.js";
import { findIndex as Fe } from "../../../../utilities/lib/array.js";
import { useMergedRefs as Re } from "../../../../react-hooks/lib/useMergedRefs.js";
import { IconButton as Me } from "../Button/IconButton/IconButton.js";
import { Callout as De } from "../Callout/Callout.js";
import { Label as Ae } from "../Label/Label.js";
import { CommandButton as Te } from "../Button/CommandButton/CommandButton.js";
var x;
x || (x = {});
var M;
M || (M = {});
var ke = 250, Be = 500, Ne = 1e3, Ee = /* @__PURE__ */ I.memo(function(c) {
  var l = c.render;
  return l();
}, function(c, l) {
  c.render;
  var n = U(c, ["render"]);
  l.render;
  var e = U(l, ["render"]);
  return X(n, e);
}), Y = "ComboBox", We = {
  options: [],
  allowFreeform: !1,
  allowParentArrowNavigation: !1,
  autoComplete: "on",
  buttonIconProps: { iconName: "ChevronDown" }
};
function Le(c) {
  var l = c.options, n = c.defaultSelectedKey, e = c.selectedKey, t = I.useState(function() {
    return Q(l, Ue(n, e));
  }), r = t[0], i = t[1], a = I.useState(l), o = a[0], p = a[1], u = I.useState(), s = u[0], d = u[1];
  return I.useEffect(function() {
    if (e !== void 0) {
      var f = j(e), g = Q(l, f);
      i(g);
    }
    p(l);
  }, [l, e]), I.useEffect(function() {
    e === null && d(void 0);
  }, [e]), [
    r,
    i,
    o,
    p,
    s,
    d
  ];
}
var He = /* @__PURE__ */ I.forwardRef(function(c, l) {
  var n = ue(We, c);
  n.ref;
  var e = U(n, ["ref"]), t = I.useRef(null), r = Re(t, l), i = Le(e), a = i[0], o = i[1], p = i[2], u = i[3], s = i[4], d = i[5];
  return I.createElement(Ke, m({}, e, { hoisted: {
    mergedRootRef: r,
    rootRef: t,
    selectedIndices: a,
    setSelectedIndices: o,
    currentOptions: p,
    setCurrentOptions: u,
    suggestedDisplayValue: s,
    setSuggestedDisplayValue: d
  } }));
});
He.displayName = Y;
function Z(c, l) {
  for (var n = he(c), e = 0; e < n.length; e++) {
    var t = n[e];
    if (l(t))
      return t;
    var r = Z(t, l);
    if (r)
      return r;
  }
  return null;
}
var Ke = (
  /** @class */
  /* @__PURE__ */ function(c) {
    re(l, c);
    function l(n) {
      var e = c.call(this, n) || this;
      return e._autofill = I.createRef(), e._comboBoxWrapper = I.createRef(), e._comboBoxMenu = I.createRef(), e._selectedElement = I.createRef(), e._overrideScrollDismiss = !1, e.focus = function(t, r) {
        e.props.disabled || (e._autofill.current && (r ? _e(e._autofill.current) : e._autofill.current.focus(), t && e.setState({
          isOpen: !0
        })), e._hasFocus() || e.setState({ focusState: "focused" }));
      }, e.dismissMenu = function() {
        var t = e.state.isOpen;
        t && e.setState({ isOpen: !1 });
      }, e._onUpdateValueInAutofillWillReceiveProps = function() {
        var t = e._autofill.current;
        return !t || t.value === null || t.value === void 0 ? null : D(e._currentVisibleValue);
      }, e._renderComboBoxWrapper = function(t, r) {
        var i = e.props, a = i.label, o = i.disabled, p = i.ariaLabel, u = i.ariaDescribedBy, s = u === void 0 ? e.props["aria-describedby"] : u, d = i.required, f = i.errorMessage, g = i.buttonIconProps, h = i.isButtonAriaHidden, v = i.title, _ = i.placeholder, b = i.tabIndex, S = i.autofill, y = i.iconButtonProps, F = i.hoisted.suggestedDisplayValue, R = e.state, A = R.ariaActiveDescendantValue, P = R.isOpen, k = e._hasFocus() && e.props.multiSelect && t ? t : _, T = [e.props["aria-labelledby"], a && e._id + "-label"].join(" ").trim(), B = {
          "aria-labelledby": T || void 0,
          "aria-label": p && !a ? p : void 0
        };
        return I.createElement(
          "div",
          { "data-ktp-target": !0, ref: e._comboBoxWrapper, id: e._id + "wrapper", className: e._classNames.root, "aria-owns": P ? e._id + "-list" : void 0 },
          I.createElement(me, m({ "data-ktp-execute-target": !0, "data-is-interactable": !o, componentRef: e._autofill, id: e._id + "-input", className: e._classNames.input, type: "text", onFocus: e._onFocus, onBlur: e._onBlur, onKeyDown: e._onInputKeyDown, onKeyUp: e._onInputKeyUp, onClick: e._onAutofillClick, onTouchStart: e._onTouchStart, onInputValueChange: e._onInputChange, "aria-expanded": P, "aria-autocomplete": e._getAriaAutoCompleteValue(), role: "combobox", readOnly: o }, B, { "aria-describedby": f !== void 0 ? ge(s, r) : s, "aria-activedescendant": A, "aria-required": d, "aria-disabled": o, "aria-controls": P ? e._id + "-list" : void 0, spellCheck: !1, defaultVisibleValue: e._currentVisibleValue, suggestedDisplayValue: F, updateValueInWillReceiveProps: e._onUpdateValueInAutofillWillReceiveProps, shouldSelectFullInputValueInComponentDidUpdate: e._onShouldSelectFullInputValueInAutofillComponentDidUpdate, title: v, preventValueSelection: !e._hasFocus(), placeholder: k, tabIndex: o ? -1 : b }, S)),
          I.createElement(Me, m({ className: "ms-ComboBox-CaretDown-button", styles: e._getCaretButtonStyles(), role: h ? "presentation" : void 0, "aria-hidden": h }, h ? void 0 : B, { "data-is-focusable": !1, tabIndex: -1, onClick: e._onComboBoxClick, onBlur: e._onBlur, iconProps: g, disabled: o, checked: P }, y))
        );
      }, e._onShouldSelectFullInputValueInAutofillComponentDidUpdate = function() {
        return e._currentVisibleValue === e.props.hoisted.suggestedDisplayValue;
      }, e._getVisibleValue = function() {
        var t = e.props, r = t.text, i = t.allowFreeform, a = t.allowFreeInput, o = t.autoComplete, p = t.hoisted, u = p.suggestedDisplayValue, s = p.selectedIndices, d = p.currentOptions, f = e.state, g = f.currentPendingValueValidIndex, h = f.currentPendingValue, v = f.isOpen, _ = V(d, g);
        if (!(v && _) && (r || r === "") && h == null)
          return r;
        if (e.props.multiSelect)
          if (e._hasFocus()) {
            var b = -1;
            return o === "on" && _ && (b = g), e._getPendingString(h, d, b);
          } else
            return e._getMultiselectDisplayString(s, d, u);
        else {
          var b = e._getFirstSelectedIndex();
          return i || a ? (o === "on" && _ && (b = g), e._getPendingString(h, d, b)) : _ && o === "on" ? (b = g, D(h)) : !e.state.isOpen && h ? V(d, b) ? h : D(u) : V(d, b) ? w(d[b]) : D(u);
        }
      }, e._onInputChange = function(t) {
        if (e.props.disabled) {
          e._handleInputWhenDisabled(
            null
            /* event */
          );
          return;
        }
        e.props.onInputValueChange && e.props.onInputValueChange(t), e.props.allowFreeform || e.props.allowFreeInput ? e._processInputChangeWithFreeform(t) : e._processInputChangeWithoutFreeform(t);
      }, e._onFocus = function() {
        var t, r;
        (r = (t = e._autofill.current) === null || t === void 0 ? void 0 : t.inputElement) === null || r === void 0 || r.select(), e._hasFocus() || e.setState({ focusState: "focusing" });
      }, e._onResolveOptions = function() {
        if (e.props.onResolveOptions) {
          var t = e.props.onResolveOptions(L([], e.props.hoisted.currentOptions, !0));
          Array.isArray(t) ? e.props.hoisted.setCurrentOptions(t) : t && t.then && (e._currentPromise = t, t.then(function(r) {
            t === e._currentPromise && e.props.hoisted.setCurrentOptions(r);
          }));
        }
      }, e._onBlur = function(t) {
        var r, i, a = z(e.context), o = t.relatedTarget;
        if (t.relatedTarget === null && (o = a == null ? void 0 : a.activeElement), o) {
          var p = (r = e.props.hoisted.rootRef.current) === null || r === void 0 ? void 0 : r.contains(o), u = (i = e._comboBoxMenu.current) === null || i === void 0 ? void 0 : i.contains(o), s = e._comboBoxMenu.current && ve(e._comboBoxMenu.current, function(d) {
            return d === o;
          }, a);
          if (p || u || s) {
            s && e._hasFocus() && (!e.props.multiSelect || e.props.allowFreeform) && e._submitPendingValue(t), t.preventDefault(), t.stopPropagation();
            return;
          }
        }
        e._hasFocus() && (e.setState({ focusState: "none" }), (!e.props.multiSelect || e.props.allowFreeform) && e._submitPendingValue(t));
      }, e._onRenderContainer = function(t, r) {
        var i = t.onRenderList, a = t.calloutProps, o = t.dropdownWidth, p = t.dropdownMaxWidth, u = t.onRenderUpperContent, s = u === void 0 ? e._onRenderUpperContent : u, d = t.onRenderLowerContent, f = d === void 0 ? e._onRenderLowerContent : d, g = t.useComboBoxAsMenuWidth, h = t.persistMenu, v = t.shouldRestoreFocus, _ = v === void 0 ? !0 : v, b = e.state.isOpen, S = e._id, y = g && e._comboBoxWrapper.current ? e._comboBoxWrapper.current.clientWidth + 2 : void 0;
        return I.createElement(
          De,
          m({ isBeakVisible: !1, gapSpace: 0, doNotLayer: !1, directionalHint: Ie.bottomLeftEdge, directionalHintFixed: !1 }, a, {
            onLayerMounted: e._onLayerMounted,
            className: be(e._classNames.callout, a == null ? void 0 : a.className),
            target: e._comboBoxWrapper.current,
            onDismiss: e._onDismiss,
            onMouseDown: e._onCalloutMouseDown,
            onScroll: e._onScroll,
            setInitialFocus: !1,
            calloutWidth: g && e._comboBoxWrapper.current ? y && y : o,
            calloutMaxWidth: p || y,
            hidden: h ? !b : void 0,
            shouldRestoreFocus: _,
            // eslint-disable-next-line react/jsx-no-bind
            preventDismissOnEvent: function(F) {
              return e._preventDismissOnScrollOrResize(F);
            }
          }),
          s(e.props, e._onRenderUpperContent),
          I.createElement("div", { className: e._classNames.optionsContainerWrapper, ref: e._comboBoxMenu }, i == null ? void 0 : i(m(m({}, t), { id: S }), e._onRenderList)),
          f(e.props, e._onRenderLowerContent)
        );
      }, e._onLayerMounted = function() {
        e._onCalloutLayerMounted(), e._async.setTimeout(function() {
          e._scrollIntoView();
        }, 0), e.props.calloutProps && e.props.calloutProps.onLayerMounted && e.props.calloutProps.onLayerMounted();
      }, e._onRenderLabel = function(t) {
        var r = t.props, i = r.label, a = r.disabled, o = r.required;
        return i ? I.createElement(
          Ae,
          { id: e._id + "-label", disabled: a, required: o, className: e._classNames.label },
          i,
          t.multiselectAccessibleText && I.createElement("span", { className: e._classNames.screenReaderText }, t.multiselectAccessibleText)
        ) : null;
      }, e._onRenderList = function(t) {
        var r = t.onRenderItem, i = r === void 0 ? e._onRenderItem : r, a = t.label, o = t.ariaLabel, p = t.multiSelect, u = { items: [] }, s = [], d = function() {
          var h = u.id ? [
            I.createElement("div", { role: "group", key: u.id, "aria-labelledby": u.id }, u.items)
          ] : u.items;
          s = L(L([], s, !0), h, !0), u = { items: [] };
        }, f = function(h, v) {
          switch (h.itemType) {
            case O.Header:
              u.items.length > 0 && d();
              var _ = e._id + h.key;
              u.items.push(i(m(m({ id: _ }, h), { index: v }), e._onRenderItem)), u.id = _;
              break;
            case O.Divider:
              v > 0 && u.items.push(i(m(m({}, h), { index: v }), e._onRenderItem)), u.items.length > 0 && d();
              break;
            default:
              u.items.push(i(m(m({}, h), { index: v }), e._onRenderItem));
          }
        };
        t.options.forEach(function(h, v) {
          f(h, v);
        }), u.items.length > 0 && d();
        var g = e._id;
        return I.createElement("div", { id: g + "-list", className: e._classNames.optionsContainer, "aria-labelledby": a && g + "-label", "aria-label": o && !a ? o : void 0, "aria-multiselectable": p ? "true" : void 0, role: "listbox" }, s);
      }, e._onRenderItem = function(t) {
        switch (t.itemType) {
          case O.Divider:
            return e._renderSeparator(t);
          case O.Header:
            return e._renderHeader(t);
          default:
            return e._renderOption(t);
        }
      }, e._onRenderLowerContent = function() {
        return null;
      }, e._onRenderUpperContent = function() {
        return null;
      }, e._renderOption = function(t) {
        var r, i = e.props.onRenderOption, a = i === void 0 ? e._onRenderOptionContent : i, o = (r = t.id) !== null && r !== void 0 ? r : e._id + "-list" + t.index, p = e._isOptionSelected(t.index), u = e._isOptionChecked(t.index), s = e._isOptionIndeterminate(t.index), d = e._getCurrentOptionStyles(t), f = H(d), g = t.title, h = function() {
          return e.props.multiSelect ? I.createElement(we, {
            id: o,
            ariaLabel: t.ariaLabel,
            ariaLabelledBy: t.ariaLabel ? void 0 : o + "-label",
            key: t.key,
            styles: d,
            className: "ms-ComboBox-option",
            onChange: e._onItemClick(t),
            label: t.text,
            checked: u,
            indeterminate: s,
            title: g,
            disabled: t.disabled,
            // eslint-disable-next-line react/jsx-no-bind
            onRenderLabel: e._renderCheckboxLabel.bind(e, m(m({}, t), { id: o + "-label" })),
            inputProps: m({
              // aria-selected should only be applied to checked items, not hovered items
              "aria-selected": u ? "true" : "false",
              role: "option"
            }, {
              "data-index": t.index,
              "data-is-focusable": !0
            })
          }) : I.createElement(Te, {
            id: o,
            key: t.key,
            "data-index": t.index,
            styles: d,
            checked: p,
            className: "ms-ComboBox-option",
            onClick: e._onItemClick(t),
            // eslint-disable-next-line react/jsx-no-bind
            onMouseEnter: e._onOptionMouseEnter.bind(e, t.index),
            // eslint-disable-next-line react/jsx-no-bind
            onMouseMove: e._onOptionMouseMove.bind(e, t.index),
            onMouseLeave: e._onOptionMouseLeave,
            role: "option",
            "aria-selected": p ? "true" : "false",
            ariaLabel: t.ariaLabel,
            disabled: t.disabled,
            title: g
          }, I.createElement("span", { className: f.optionTextWrapper, ref: p ? e._selectedElement : void 0 }, a(t, e._onRenderOptionContent)));
        };
        return I.createElement(Ee, {
          key: t.key,
          index: t.index,
          disabled: t.disabled,
          isSelected: p,
          isChecked: u,
          isIndeterminate: s,
          text: t.text,
          // eslint-disable-next-line react/jsx-no-bind
          render: h,
          data: t.data
        });
      }, e._onCalloutMouseDown = function(t) {
        t.preventDefault();
      }, e._onScroll = function() {
        var t;
        !e._isScrollIdle && e._scrollIdleTimeoutId !== void 0 ? (e._async.clearTimeout(e._scrollIdleTimeoutId), e._scrollIdleTimeoutId = void 0) : e._isScrollIdle = !1, !((t = e.props.calloutProps) === null || t === void 0) && t.onScroll && e.props.calloutProps.onScroll(), e._scrollIdleTimeoutId = e._async.setTimeout(function() {
          e._isScrollIdle = !0;
        }, ke);
      }, e._onRenderOptionContent = function(t) {
        var r = H(e._getCurrentOptionStyles(t));
        return I.createElement("span", { className: r.optionText }, t.text);
      }, e._onRenderMultiselectOptionContent = function(t) {
        var r = H(e._getCurrentOptionStyles(t));
        return I.createElement("span", { id: t.id, "aria-hidden": "true", className: r.optionText }, t.text);
      }, e._onDismiss = function() {
        var t = e.props.onMenuDismiss;
        t && t(), e.props.persistMenu && e._onCalloutLayerMounted(), e._setOpenStateAndFocusOnClose(
          !1,
          !1
          /* focusInputAfterClose */
        ), e._resetSelectedIndex();
      }, e._onAfterClearPendingInfo = function() {
        e._processingClearPendingInfo = !1;
      }, e._onInputKeyDown = function(t) {
        var r = e.props, i = r.disabled, a = r.allowFreeform, o = r.allowFreeInput, p = r.allowParentArrowNavigation, u = r.autoComplete, s = r.hoisted.currentOptions, d = e.state, f = d.isOpen, g = d.currentPendingValueValidIndexOnHover;
        if (e._lastKeyDownWasAltOrMeta = J(t), i) {
          e._handleInputWhenDisabled(t);
          return;
        }
        var h = e._getPendingSelectedIndex(
          !1
          /* includeCurrentPendingValue */
        );
        switch (t.which) {
          case C.enter:
            e._autofill.current && e._autofill.current.inputElement && e._autofill.current.inputElement.select(), e._submitPendingValue(t), e.props.multiSelect && f ? e.setState({
              currentPendingValueValidIndex: h
            }) : (f || (!a || e.state.currentPendingValue === void 0 || e.state.currentPendingValue === null || e.state.currentPendingValue.length <= 0) && e.state.currentPendingValueValidIndex < 0) && e.setState({
              isOpen: !f
            });
            break;
          case C.tab:
            e.props.multiSelect || e._submitPendingValue(t), f && e._setOpenStateAndFocusOnClose(
              !f,
              !1
              /* focusInputAfterClose */
            );
            return;
          case C.escape:
            if (e._resetSelectedIndex(), f)
              e.setState({
                isOpen: !1
              });
            else
              return;
            break;
          case C.up:
            if (g === M.clearAll && (h = e.props.hoisted.currentOptions.length), t.altKey || t.metaKey) {
              if (f) {
                e._setOpenStateAndFocusOnClose(
                  !f,
                  !0
                  /* focusInputAfterClose */
                );
                break;
              }
              return;
            }
            t.preventDefault(), e._setPendingInfoFromIndexAndDirection(h, x.backward);
            break;
          case C.down:
            t.altKey || t.metaKey ? e._setOpenStateAndFocusOnClose(
              !0,
              !0
              /* focusInputAfterClose */
            ) : (g === M.clearAll && (h = -1), t.preventDefault(), e._setPendingInfoFromIndexAndDirection(h, x.forward));
            break;
          case C.home:
          case C.end:
            if (a || o)
              return;
            h = -1;
            var v = x.forward;
            t.which === C.end && (h = s.length, v = x.backward), e._setPendingInfoFromIndexAndDirection(h, v);
            break;
          case C.space:
            if (!a && !o && u === "off")
              break;
          default:
            if (t.which >= 112 && t.which <= 123 || t.keyCode === C.alt || t.key === "Meta" || p && (t.keyCode === C.left || t.keyCode === C.right))
              return;
            if (!a && !o && u === "on") {
              e._onInputChange(t.key);
              break;
            }
            return;
        }
        t.stopPropagation(), t.preventDefault();
      }, e._onInputKeyUp = function(t) {
        var r = e.props, i = r.disabled, a = r.allowFreeform, o = r.allowFreeInput, p = r.autoComplete, u = e.state.isOpen, s = e._lastKeyDownWasAltOrMeta && J(t);
        e._lastKeyDownWasAltOrMeta = !1;
        var d = s && !(ye() || Se());
        if (i) {
          e._handleInputWhenDisabled(t);
          return;
        }
        switch (t.which) {
          case C.space:
            !a && !o && p === "off" && e._setOpenStateAndFocusOnClose(!u, !!u);
            return;
          default:
            d && u ? e._setOpenStateAndFocusOnClose(
              !u,
              !0
              /* focusInputAfterClose */
            ) : (e.state.focusState === "focusing" && e.props.openOnKeyboardFocus && e.setState({ isOpen: !0 }), e.state.focusState !== "focused" && e.setState({ focusState: "focused" }));
            return;
        }
      }, e._onOptionMouseLeave = function() {
        e._shouldIgnoreMouseEvent() || e.props.persistMenu && !e.state.isOpen || e.setState({
          currentPendingValueValidIndexOnHover: M.clearAll
        });
      }, e._onComboBoxClick = function() {
        var t = e.props.disabled, r = e.state.isOpen;
        t || (e._setOpenStateAndFocusOnClose(
          !r,
          !1
          /* focusInputAfterClose */
        ), e.setState({ focusState: "focused" }));
      }, e._onAutofillClick = function() {
        var t = e.props, r = t.disabled, i = t.allowFreeform;
        i && !r ? e.focus(e.state.isOpen || e._processingTouch) : e._onComboBoxClick();
      }, e._onTouchStart = function() {
        e._comboBoxWrapper.current && !("onpointerdown" in e._comboBoxWrapper) && e._handleTouchAndPointerEvent();
      }, e._onPointerDown = function(t) {
        t.pointerType === "touch" && (e._handleTouchAndPointerEvent(), t.preventDefault(), t.stopImmediatePropagation());
      }, Ce(e), e._async = new Oe(e), e._events = new xe(e), Pe(Y, n, {
        defaultSelectedKey: "selectedKey",
        text: "defaultSelectedKey",
        selectedKey: "value",
        dropdownWidth: "useComboBoxAsMenuWidth",
        ariaLabel: "label"
      }), e._id = n.id || G("ComboBox"), e._isScrollIdle = !0, e._processingTouch = !1, e._gotMouseMove = !1, e._processingClearPendingInfo = !1, e.state = {
        isOpen: !1,
        focusState: "none",
        currentPendingValueValidIndex: -1,
        currentPendingValue: void 0,
        currentPendingValueValidIndexOnHover: M.default
      }, e;
    }
    return Object.defineProperty(l.prototype, "selectedOptions", {
      /**
       * All selected options
       */
      get: function() {
        var n = this.props.hoisted, e = n.currentOptions, t = n.selectedIndices;
        return de(e, t);
      },
      enumerable: !1,
      configurable: !0
    }), l.prototype.componentDidMount = function() {
      this._comboBoxWrapper.current && !this.props.disabled && (this._events.on(this._comboBoxWrapper.current, "focus", this._onResolveOptions, !0), "onpointerdown" in this._comboBoxWrapper.current && this._events.on(this._comboBoxWrapper.current, "pointerdown", this._onPointerDown, !0));
    }, l.prototype.componentDidUpdate = function(n, e) {
      var t = this, r, i, a, o = this.props, p = o.allowFreeform, u = o.allowFreeInput, s = o.text, d = o.onMenuOpen, f = o.onMenuDismissed, g = o.hoisted, h = g.currentOptions, v = g.selectedIndices, _ = this.state, b = _.currentPendingValue, S = _.currentPendingValueValidIndex, y = _.isOpen;
      y && (!e.isOpen || e.currentPendingValueValidIndex !== S) && this._async.setTimeout(function() {
        return t._scrollIntoView();
      }, 0);
      var F = z(this.context);
      this._hasFocus() && (y || e.isOpen && !y && this._focusInputAfterClose && this._autofill.current && (F == null ? void 0 : F.activeElement) !== this._autofill.current.inputElement) && this.focus(
        void 0,
        !0
        /*useFocusAsync*/
      ), this._focusInputAfterClose && (e.isOpen && !y || this._hasFocus() && (!y && !this.props.multiSelect && n.hoisted.selectedIndices && v && n.hoisted.selectedIndices[0] !== v[0] || !p && !u || s !== n.text)) && this._onFocus(), this._notifyPendingValueChanged(e), y && !e.isOpen && (this._overrideScrollDismiss = !0, this._async.clearTimeout(this._overrideScrollDimissTimeout), this._overrideScrollDimissTimeout = this._async.setTimeout(function() {
        t._overrideScrollDismiss = !1;
      }, 100), d == null || d()), !y && e.isOpen && f && f();
      var R = S, A = h.map(function(k, T) {
        return m(m({}, k), { index: T });
      });
      !X(n.hoisted.currentOptions, h) && b && (R = this.props.allowFreeform || this.props.allowFreeInput ? this._processInputChangeWithFreeform(b) : this._updateAutocompleteIndexWithoutFreeform(b));
      var P = void 0;
      y && this._hasFocus() && R !== -1 ? P = (r = A[R].id) !== null && r !== void 0 ? r : this._id + "-list" + R : y && v.length && (P = (a = (i = A[v[0]]) === null || i === void 0 ? void 0 : i.id) !== null && a !== void 0 ? a : this._id + "-list" + v[0]), P !== this.state.ariaActiveDescendantValue && this.setState({
        ariaActiveDescendantValue: P
      });
    }, l.prototype.componentWillUnmount = function() {
      this._async.dispose(), this._events.dispose();
    }, l.prototype.render = function() {
      var n = this._id, e = n + "-error", t = this.props, r = t.className, i = t.disabled, a = t.required, o = t.errorMessage, p = t.onRenderContainer, u = p === void 0 ? this._onRenderContainer : p, s = t.onRenderLabel, d = s === void 0 ? this._onRenderLabel : s, f = t.onRenderList, g = f === void 0 ? this._onRenderList : f, h = t.onRenderItem, v = h === void 0 ? this._onRenderItem : h, _ = t.onRenderOption, b = _ === void 0 ? this._onRenderOptionContent : _, S = t.allowFreeform, y = t.styles, F = t.theme, R = t.persistMenu, A = t.multiSelect, P = t.hoisted, k = P.suggestedDisplayValue, T = P.selectedIndices, B = P.currentOptions, E = this.state.isOpen;
      this._currentVisibleValue = this._getVisibleValue();
      var q = A ? this._getMultiselectDisplayString(T, B, k) : void 0, $ = ce(this.props, pe, [
        "onChange",
        "value",
        "aria-describedby",
        "aria-labelledby"
      ]), W = !!(o && o.length > 0);
      this._classNames = this.props.getClassNames ? this.props.getClassNames(F, !!E, !!i, !!a, !!this._hasFocus(), !!S, !!W, r) : le(oe(F, y), r, !!E, !!i, !!a, !!this._hasFocus(), !!S, !!W);
      var ee = this._renderComboBoxWrapper(q, e);
      return I.createElement(
        "div",
        m({}, $, { ref: this.props.hoisted.mergedRootRef, className: this._classNames.container }),
        d({ props: this.props, multiselectAccessibleText: q }, this._onRenderLabel),
        ee,
        (R || E) && u(m(m({}, this.props), { onRenderList: g, onRenderItem: v, onRenderOption: b, options: B.map(function(te, ne) {
          return m(m({}, te), { index: ne });
        }), onDismiss: this._onDismiss }), this._onRenderContainer),
        W && I.createElement("div", { role: "alert", id: e, className: this._classNames.errorMessage }, o)
      );
    }, l.prototype._getPendingString = function(n, e, t) {
      return n ?? (V(e, t) ? w(e[t]) : "");
    }, l.prototype._getMultiselectDisplayString = function(n, e, t) {
      for (var r = [], i = 0; n && i < n.length; i++) {
        var a = n[i];
        e[a].itemType !== O.SelectAll && r.push(V(e, a) ? e[a].text : D(t));
      }
      var o = this.props.multiSelectDelimiter, p = o === void 0 ? ", " : o;
      return r.join(p);
    }, l.prototype._preventDismissOnScrollOrResize = function(n) {
      var e = this.props.calloutProps;
      return e != null && e.preventDismissOnEvent ? e.preventDismissOnEvent(n) : !!(this._overrideScrollDismiss && (n.type === "scroll" || n.type === "resize"));
    }, l.prototype._processInputChangeWithFreeform = function(n) {
      var e = this, t = this.props.hoisted.currentOptions, r = -1;
      if (n === "") {
        var i = t.map(function(u, s) {
          return m(m({}, u), { index: s });
        }).filter(function(u) {
          return N(u) && !u.disabled && w(u) === n;
        });
        return i.length === 1 && (r = i[0].index), this._setPendingInfo(n, r, n), r;
      }
      var a = n;
      n = this._adjustForCaseSensitivity(n);
      var o = "";
      if (this.props.autoComplete === "on") {
        var i = t.map(function(s, d) {
          return m(m({}, s), { index: d });
        }).filter(function(s) {
          return N(s) && !s.disabled && e._adjustForCaseSensitivity(w(s)).indexOf(n) === 0;
        });
        if (i.length > 0) {
          var p = w(i[0]);
          o = this._adjustForCaseSensitivity(p) !== n ? p : "", r = i[0].index;
        }
      } else {
        var i = t.map(function(s, d) {
          return m(m({}, s), { index: d });
        }).filter(function(s) {
          return N(s) && !s.disabled && e._adjustForCaseSensitivity(w(s)) === n;
        });
        i.length === 1 && (r = i[0].index);
      }
      return this._setPendingInfo(a, r, o), r;
    }, l.prototype._processInputChangeWithoutFreeform = function(n) {
      var e = this, t = this.state, r = t.currentPendingValue, i = t.currentPendingValueValidIndex;
      if (this.props.autoComplete === "on" && n !== "") {
        this._autoCompleteTimeout && (this._async.clearTimeout(this._autoCompleteTimeout), this._autoCompleteTimeout = void 0, n = D(r) + n);
        var a = this._updateAutocompleteIndexWithoutFreeform(n);
        return this._autoCompleteTimeout = this._async.setTimeout(function() {
          e._autoCompleteTimeout = void 0;
        }, Ne), a;
      }
      var o = i >= 0 ? i : this._getFirstSelectedIndex();
      return this._setPendingInfoFromIndex(o), o;
    }, l.prototype._updateAutocompleteIndexWithoutFreeform = function(n) {
      var e = this, t = this.props.hoisted.currentOptions, r = n;
      n = this._adjustForCaseSensitivity(n);
      var i = t.map(function(a, o) {
        return m(m({}, a), { index: o });
      }).filter(function(a) {
        return N(a) && !a.disabled && e._adjustForCaseSensitivity(a.text).indexOf(n) === 0;
      });
      return i.length > 0 ? (this._setPendingInfo(r, i[0].index, w(i[0])), i[0].index) : -1;
    }, l.prototype._getFirstSelectedIndex = function() {
      var n = this.props.hoisted.selectedIndices;
      return n != null && n.length ? n[0] : -1;
    }, l.prototype._getNextSelectableIndex = function(n, e) {
      var t = this.props.hoisted.currentOptions, r = n + e;
      if (r = Math.max(0, Math.min(t.length - 1, r)), !V(t, r))
        return -1;
      var i = t[r];
      if (!K(i) || i.hidden === !0)
        if (e !== x.none && (r > 0 && e < x.none || r >= 0 && r < t.length && e > x.none))
          r = this._getNextSelectableIndex(r, e);
        else
          return n;
      return r;
    }, l.prototype._setSelectedIndex = function(n, e, t) {
      t === void 0 && (t = x.none);
      var r = this.props, i = r.onChange, a = r.onPendingValueChanged, o = r.hoisted, p = o.selectedIndices, u = o.currentOptions, s = p ? p.slice() : [], d = u.slice();
      if (n = this._getNextSelectableIndex(n, t), !!V(u, n)) {
        if (this.props.multiSelect || s.length < 1 || s.length === 1 && s[0] !== n) {
          var f = m({}, u[n]);
          if (!f || f.disabled)
            return;
          if (this.props.multiSelect)
            if (f.selected = f.selected !== void 0 ? !f.selected : s.indexOf(n) < 0, f.itemType === O.SelectAll)
              s = [], f.selected ? u.forEach(function(_, b) {
                !_.disabled && K(_) && (s.push(b), d[b] = m(m({}, _), { selected: !0 }));
              }) : d = u.map(function(_) {
                return m(m({}, _), { selected: !1 });
              });
            else {
              f.selected && s.indexOf(n) < 0 ? s.push(n) : !f.selected && s.indexOf(n) >= 0 && (s = s.filter(function(_) {
                return _ !== n;
              })), d[n] = f;
              var g = d.filter(function(_) {
                return _.itemType === O.SelectAll;
              })[0];
              if (g) {
                var h = this._isSelectAllChecked(s), v = d.indexOf(g);
                h ? (s.push(v), d[v] = m(m({}, g), { selected: !0 })) : (s = s.filter(function(_) {
                  return _ !== v;
                }), d[v] = m(m({}, g), { selected: !1 }));
              }
            }
          else
            s[0] = n;
          e.persist(), this.props.selectedKey || this.props.selectedKey === null ? this._hasPendingValue && a && (a(), this._hasPendingValue = !1) : (this.props.hoisted.setSelectedIndices(s), this.props.hoisted.setCurrentOptions(d), this._hasPendingValue && a && (a(), this._hasPendingValue = !1)), i && i(e, f, n, w(f));
        }
        this.props.multiSelect && this.state.isOpen || this._clearPendingInfo();
      }
    }, l.prototype._submitPendingValue = function(n) {
      var e, t = this.props, r = t.onChange, i = t.allowFreeform, a = t.autoComplete, o = t.multiSelect, p = t.hoisted, u = p.currentOptions, s = this.state, d = s.currentPendingValue, f = s.currentPendingValueValidIndex, g = s.currentPendingValueValidIndexOnHover, h = this.props.hoisted.selectedIndices;
      if (!this._processingClearPendingInfo) {
        if (i) {
          if (d == null) {
            g >= 0 && (this._setSelectedIndex(g, n), this._clearPendingInfo());
            return;
          }
          if (V(u, f)) {
            var v = this._adjustForCaseSensitivity(w(u[f])), _ = this._autofill.current, b = this._adjustForCaseSensitivity(d);
            if (b === v || a && v.indexOf(b) === 0 && (_ != null && _.isValueSelected) && d.length + (_.selectionEnd - _.selectionStart) === v.length || ((e = _ == null ? void 0 : _.inputElement) === null || e === void 0 ? void 0 : e.value) !== void 0 && this._adjustForCaseSensitivity(_.inputElement.value) === v) {
              if (this._setSelectedIndex(f, n), o && this.state.isOpen)
                return;
              this._clearPendingInfo();
              return;
            }
          }
          if (r)
            r && r(n, void 0, void 0, d);
          else {
            var S = {
              key: d || G(),
              text: D(d)
            };
            o && (S.selected = !0);
            var y = u.concat([S]);
            h && (o || (h = []), h.push(y.length - 1)), p.setCurrentOptions(y), p.setSelectedIndices(h);
          }
        } else f >= 0 ? this._setSelectedIndex(f, n) : g >= 0 && this._setSelectedIndex(g, n);
        this._clearPendingInfo();
      }
    }, l.prototype._onCalloutLayerMounted = function() {
      this._gotMouseMove = !1;
    }, l.prototype._renderSeparator = function(n) {
      var e = n.index, t = n.key;
      return e && e > 0 ? I.createElement("div", { role: "presentation", key: t, className: this._classNames.divider }) : null;
    }, l.prototype._renderHeader = function(n) {
      var e = this.props.onRenderOption, t = e === void 0 ? this._onRenderOptionContent : e;
      return I.createElement("div", { id: n.id, key: n.key, className: this._classNames.header }, t(n, this._onRenderOptionContent));
    }, l.prototype._renderCheckboxLabel = function(n) {
      var e = this.props.onRenderOption, t = e === void 0 ? this._onRenderMultiselectOptionContent : e;
      return t(n, this._onRenderMultiselectOptionContent);
    }, l.prototype._isOptionHighlighted = function(n) {
      var e = this.state.currentPendingValueValidIndexOnHover;
      return e === M.clearAll ? !1 : e >= 0 ? e === n : this._isOptionSelected(n);
    }, l.prototype._isOptionSelected = function(n) {
      return this._getPendingSelectedIndex(
        !0
        /* includePendingValue */
      ) === n;
    }, l.prototype._isOptionChecked = function(n) {
      if (this.props.multiSelect && n !== void 0 && this.props.hoisted.selectedIndices) {
        var e = -1;
        return e = this.props.hoisted.selectedIndices.indexOf(n), e >= 0;
      }
      return !1;
    }, l.prototype._isOptionIndeterminate = function(n) {
      var e = this.props, t = e.multiSelect, r = e.hoisted;
      if (t && n !== void 0 && r.selectedIndices && r.currentOptions) {
        var i = r.currentOptions[n];
        if (i && i.itemType === O.SelectAll)
          return r.selectedIndices.length > 0 && !this._isSelectAllChecked();
      }
      return !1;
    }, l.prototype._isSelectAllChecked = function(n) {
      var e = this.props, t = e.multiSelect, r = e.hoisted, i = r.currentOptions.find(function(s) {
        return s.itemType === O.SelectAll;
      }), a = n || r.selectedIndices;
      if (!t || !a || !i)
        return !1;
      var o = r.currentOptions.indexOf(i), p = a.filter(function(s) {
        return s !== o;
      }), u = r.currentOptions.filter(function(s) {
        return !s.disabled && s.itemType !== O.SelectAll && K(s);
      });
      return p.length === u.length;
    }, l.prototype._getPendingSelectedIndex = function(n) {
      var e = this.state, t = e.currentPendingValueValidIndex, r = e.currentPendingValue;
      return t >= 0 || n && r !== null && r !== void 0 ? t : this.props.multiSelect ? -1 : this._getFirstSelectedIndex();
    }, l.prototype._scrollIntoView = function() {
      var n = this.props, e = n.onScrollToItem, t = n.scrollSelectedToTop, r = this._getPendingSelectedIndex(!0);
      if (e) {
        e(r >= 0 ? r : this._getFirstSelectedIndex());
        return;
      }
      var i = this._selectedElement.current;
      if (this.props.multiSelect && this._comboBoxMenu.current && (i = Z(this._comboBoxMenu.current, function(b) {
        var S;
        return ((S = b.dataset) === null || S === void 0 ? void 0 : S.index) === r.toString();
      })), i && i.offsetParent) {
        var a = !0;
        if (this._comboBoxMenu.current && this._comboBoxMenu.current.offsetParent) {
          var o = this._comboBoxMenu.current.offsetParent, p = i.offsetParent, u = p, s = u.offsetHeight, d = u.offsetTop, f = o, g = f.offsetHeight, h = f.scrollTop, v = d < h, _ = d + s > h + g;
          v || t ? (a = !1, o.scrollTo(0, d)) : _ && o.scrollTo(0, d - g + s);
        } else
          i.offsetParent.scrollIntoView(a);
      }
    }, l.prototype._onItemClick = function(n) {
      var e = this, t = this.props.onItemClick, r = n.index;
      return function(i) {
        e.props.multiSelect || (e._autofill.current && e._autofill.current.focus(), e.setState({
          isOpen: !1
        })), t && t(i, n, r), e._setSelectedIndex(r, i);
      };
    }, l.prototype._resetSelectedIndex = function() {
      var n = this.props.hoisted.currentOptions;
      this._clearPendingInfo();
      var e = this._getFirstSelectedIndex();
      e > 0 && e < n.length ? this.props.hoisted.setSuggestedDisplayValue(n[e].text) : this.props.text && this.props.hoisted.setSuggestedDisplayValue(this.props.text);
    }, l.prototype._clearPendingInfo = function() {
      this._processingClearPendingInfo = !0, this.props.hoisted.setSuggestedDisplayValue(void 0), this.setState({
        currentPendingValue: void 0,
        currentPendingValueValidIndex: -1,
        currentPendingValueValidIndexOnHover: M.default
      }, this._onAfterClearPendingInfo);
    }, l.prototype._setPendingInfo = function(n, e, t) {
      e === void 0 && (e = -1), !this._processingClearPendingInfo && (this.props.hoisted.setSuggestedDisplayValue(t), this.setState({
        currentPendingValue: D(n),
        currentPendingValueValidIndex: e,
        currentPendingValueValidIndexOnHover: M.default
      }));
    }, l.prototype._setPendingInfoFromIndex = function(n) {
      var e = this.props.hoisted.currentOptions;
      if (n >= 0 && n < e.length) {
        var t = e[n];
        this._setPendingInfo(w(t), n, w(t));
      } else
        this._clearPendingInfo();
    }, l.prototype._setPendingInfoFromIndexAndDirection = function(n, e) {
      var t = this.props.hoisted.currentOptions;
      e === x.forward && n >= t.length - 1 ? n = -1 : e === x.backward && n <= 0 && (n = t.length);
      var r = this._getNextSelectableIndex(n, e);
      n === r ? e === x.forward ? n = this._getNextSelectableIndex(-1, e) : e === x.backward && (n = this._getNextSelectableIndex(t.length, e)) : n = r, V(t, n) && this._setPendingInfoFromIndex(n);
    }, l.prototype._notifyPendingValueChanged = function(n) {
      var e = this.props.onPendingValueChanged;
      if (e) {
        var t = this.props.hoisted.currentOptions, r = this.state, i = r.currentPendingValue, a = r.currentPendingValueValidIndex, o = r.currentPendingValueValidIndexOnHover, p = void 0, u = void 0;
        o !== n.currentPendingValueValidIndexOnHover && V(t, o) ? p = o : a !== n.currentPendingValueValidIndex && V(t, a) ? p = a : i !== n.currentPendingValue && (u = i), (p !== void 0 || u !== void 0 || this._hasPendingValue) && (e(p !== void 0 ? t[p] : void 0, p, u), this._hasPendingValue = p !== void 0 || u !== void 0);
      }
    }, l.prototype._setOpenStateAndFocusOnClose = function(n, e) {
      this._focusInputAfterClose = e, this.setState({ isOpen: n });
    }, l.prototype._onOptionMouseEnter = function(n) {
      this._shouldIgnoreMouseEvent() || this.setState({
        currentPendingValueValidIndexOnHover: n
      });
    }, l.prototype._onOptionMouseMove = function(n) {
      this._gotMouseMove = !0, !(!this._isScrollIdle || this.state.currentPendingValueValidIndexOnHover === n) && this.setState({
        currentPendingValueValidIndexOnHover: n
      });
    }, l.prototype._shouldIgnoreMouseEvent = function() {
      return !this._isScrollIdle || !this._gotMouseMove;
    }, l.prototype._handleInputWhenDisabled = function(n) {
      this.props.disabled && (this.state.isOpen && this.setState({ isOpen: !1 }), n !== null && // eslint-disable-next-line deprecation/deprecation
      n.which !== C.tab && // eslint-disable-next-line deprecation/deprecation
      n.which !== C.escape && // eslint-disable-next-line deprecation/deprecation
      (n.which < 112 || n.which > 123) && (n.stopPropagation(), n.preventDefault()));
    }, l.prototype._handleTouchAndPointerEvent = function() {
      var n = this;
      this._lastTouchTimeoutId !== void 0 && (this._async.clearTimeout(this._lastTouchTimeoutId), this._lastTouchTimeoutId = void 0), this._processingTouch = !0, this._lastTouchTimeoutId = this._async.setTimeout(function() {
        n._processingTouch = !1, n._lastTouchTimeoutId = void 0;
      }, Be);
    }, l.prototype._getCaretButtonStyles = function() {
      var n = this.props.caretDownButtonStyles;
      return se(this.props.theme, n);
    }, l.prototype._getCurrentOptionStyles = function(n) {
      var e, t = this.props.comboBoxOptionStyles, r = n.styles, i = ae(this.props.theme, t, r, this._isPendingOption(n), n.hidden, this._isOptionHighlighted(n.index));
      return i.__shadowConfig__ = (e = this.props.styles) === null || e === void 0 ? void 0 : e.__shadowConfig__, i;
    }, l.prototype._getAriaAutoCompleteValue = function() {
      var n = !this.props.disabled && this.props.autoComplete === "on";
      return n ? this.props.allowFreeform ? "inline" : "both" : "list";
    }, l.prototype._isPendingOption = function(n) {
      return n && n.index === this.state.currentPendingValueValidIndex;
    }, l.prototype._hasFocus = function() {
      return this.state.focusState !== "none";
    }, l.prototype._adjustForCaseSensitivity = function(n) {
      return this.props.caseSensitive ? n : n.toLowerCase();
    }, l.contextType = fe, l = ie([
      Ve("ComboBox", ["theme", "styles"])
    ], l), l;
  }(I.Component)
);
function Q(c, l) {
  if (!c || !l)
    return [];
  var n = {};
  c.forEach(function(a, o) {
    a.selected && (n[o] = !0);
  });
  for (var e = function(a) {
    var o = Fe(c, function(p) {
      return p.key === a;
    });
    o > -1 && (n[o] = !0);
  }, t = 0, r = l; t < r.length; t++) {
    var i = r[t];
    e(i);
  }
  return Object.keys(n).map(Number).sort();
}
function Ue(c, l) {
  var n = j(c);
  return n.length ? n : j(l);
}
function j(c) {
  return c === void 0 ? [] : c instanceof Array ? c : [c];
}
function D(c) {
  return c || "";
}
function V(c, l) {
  return !!c && l >= 0 && l < c.length;
}
function N(c) {
  return c.itemType !== O.Header && c.itemType !== O.Divider && c.itemType !== O.SelectAll;
}
function K(c) {
  return c.itemType !== O.Header && c.itemType !== O.Divider;
}
function w(c) {
  return c.useAriaLabelAsText && c.ariaLabel ? c.ariaLabel : c.text;
}
function J(c) {
  return c.which === C.alt || c.key === "Meta";
}
export {
  He as ComboBox
};
//# sourceMappingURL=ComboBox.js.map
