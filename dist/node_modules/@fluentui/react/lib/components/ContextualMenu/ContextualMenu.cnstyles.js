import { __assign as y } from "../../../../../tslib/tslib.es6.js";
import { memoizeFunction as S } from "../../../../utilities/lib/memoize.js";
import { getFocusStyle as x } from "../../../../style-utilities/lib/styles/getFocusStyle.js";
import "../../../../style-utilities/lib/index.js";
import { IconFontSizes as r } from "../../../../theme/lib/fonts/FluentFonts.js";
import { concatStyleSets as v } from "../../../../merge-styles/lib/concatStyleSets.js";
import { HighContrastSelector as s, getHighContrastNoAdjustStyle as f, getScreenSelector as k, ScreenWidthMaxMedium as I } from "../../../../style-utilities/lib/styles/CommonStyles.js";
var n = 36, p = /* @__PURE__ */ k(0, I), B = /* @__PURE__ */ S(function(t) {
  var i, l, a, c, d, e = t.semanticColors, m = t.fonts, o = t.palette, g = e.menuItemBackgroundHovered, h = e.menuItemTextHovered, u = e.menuItemBackgroundPressed, b = e.bodyDivider, C = {
    item: [
      m.medium,
      {
        color: e.bodyText,
        position: "relative",
        boxSizing: "border-box"
      }
    ],
    divider: {
      display: "block",
      height: "1px",
      backgroundColor: b,
      position: "relative"
    },
    root: [
      x(t),
      m.medium,
      {
        color: e.bodyText,
        backgroundColor: "transparent",
        border: "none",
        width: "100%",
        height: n,
        lineHeight: n,
        display: "block",
        cursor: "pointer",
        padding: "0px 8px 0 4px",
        textAlign: "left"
      }
    ],
    rootDisabled: {
      color: e.disabledBodyText,
      cursor: "default",
      pointerEvents: "none",
      selectors: (i = {}, i[s] = {
        // ensure disabled text looks different than enabled
        color: "GrayText",
        opacity: 1
      }, i)
    },
    rootHovered: {
      backgroundColor: g,
      color: h,
      selectors: {
        ".ms-ContextualMenu-icon": {
          color: o.themeDarkAlt
        },
        ".ms-ContextualMenu-submenuIcon": {
          color: o.neutralPrimary
        }
      }
    },
    rootFocused: {
      backgroundColor: o.white
    },
    rootChecked: {
      selectors: {
        ".ms-ContextualMenu-checkmarkIcon": {
          color: o.neutralPrimary
        }
      }
    },
    rootPressed: {
      backgroundColor: u,
      selectors: {
        ".ms-ContextualMenu-icon": {
          color: o.themeDark
        },
        ".ms-ContextualMenu-submenuIcon": {
          color: o.neutralPrimary
        }
      }
    },
    rootExpanded: {
      backgroundColor: u,
      color: e.bodyTextChecked,
      selectors: (l = {
        ".ms-ContextualMenu-submenuIcon": (a = {}, a[s] = {
          // icons inside of anchor tags are not properly inheriting color in high contrast
          color: "inherit"
        }, a)
      }, l[s] = y({}, f()), l)
    },
    linkContent: {
      whiteSpace: "nowrap",
      height: "inherit",
      display: "flex",
      alignItems: "center",
      maxWidth: "100%"
    },
    anchorLink: {
      padding: "0px 8px 0 4px",
      textRendering: "auto",
      color: "inherit",
      letterSpacing: "normal",
      wordSpacing: "normal",
      textTransform: "none",
      textIndent: "0px",
      textShadow: "none",
      textDecoration: "none",
      boxSizing: "border-box"
    },
    label: {
      margin: "0 4px",
      verticalAlign: "middle",
      display: "inline-block",
      flexGrow: "1",
      textOverflow: "ellipsis",
      whiteSpace: "nowrap",
      overflow: "hidden"
    },
    secondaryText: {
      color: t.palette.neutralSecondary,
      paddingLeft: "20px",
      textAlign: "right"
    },
    icon: {
      display: "inline-block",
      minHeight: "1px",
      maxHeight: n,
      fontSize: r.medium,
      width: r.medium,
      margin: "0 4px",
      verticalAlign: "middle",
      flexShrink: "0",
      selectors: (c = {}, c[p] = {
        fontSize: r.large,
        width: r.large
      }, c)
    },
    iconColor: {
      color: e.menuIcon
    },
    iconDisabled: {
      color: e.disabledBodyText
    },
    checkmarkIcon: {
      color: e.bodySubtext
    },
    subMenuIcon: {
      height: n,
      lineHeight: n,
      color: o.neutralSecondary,
      textAlign: "center",
      display: "inline-block",
      verticalAlign: "middle",
      flexShrink: "0",
      fontSize: r.small,
      selectors: (d = {
        ":hover": {
          color: o.neutralPrimary
        },
        ":active": {
          color: o.neutralPrimary
        }
      }, d[p] = {
        fontSize: r.medium
        // 16px
      }, d)
    },
    splitButtonFlexContainer: [
      x(t),
      {
        display: "flex",
        height: n,
        flexWrap: "nowrap",
        justifyContent: "center",
        alignItems: "flex-start"
      }
    ]
  };
  return v(C);
});
export {
  n as CONTEXTUAL_MENU_ITEM_HEIGHT,
  B as getMenuItemStyles
};
//# sourceMappingURL=ContextualMenu.cnstyles.js.map
