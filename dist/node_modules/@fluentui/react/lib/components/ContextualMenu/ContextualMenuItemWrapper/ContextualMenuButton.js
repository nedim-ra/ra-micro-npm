import { __extends as z, __assign as u } from "../../../../../../tslib/tslib.es6.js";
import * as r from "react";
import { ContextualMenuItemWrapper as L } from "./ContextualMenuItemWrapper.js";
import { ContextualMenuItem as T } from "../ContextualMenuItem.js";
import { memoizeFunction as F } from "../../../../../utilities/lib/memoize.js";
import { composeComponentAs as k } from "../../../../../utilities/lib/componentAs/composeComponentAs.js";
import { getIsChecked as H, getMenuItemAriaRole as V, hasSubmenu as W, isItemDisabled as x } from "../../../utilities/contextualMenu/contextualMenuUtility.js";
import { getNativeProps as j, buttonProperties as q } from "../../../../../utilities/lib/properties.js";
import { getId as G } from "../../../../../utilities/lib/getId.js";
import { mergeAriaAttributeValues as J } from "../../../../../utilities/lib/aria.js";
import { KeytipData as O } from "../../KeytipData/KeytipData.js";
var re = (
  /** @class */
  /* @__PURE__ */ function(m) {
    z(d, m);
    function d() {
      var n = m !== null && m.apply(this, arguments) || this;
      return n._btn = r.createRef(), n._getMemoizedMenuButtonKeytipProps = F(function(t) {
        return u(u({}, t), { hasMenu: !0 });
      }), n._renderAriaDescription = function(t, e) {
        return t ? r.createElement("span", { id: n._ariaDescriptionId, className: e }, t) : null;
      }, n._getSubmenuTarget = function() {
        return n._btn.current ? n._btn.current : void 0;
      }, n;
    }
    return d.prototype.render = function() {
      var n = this, t = this.props, e = t.item, c = t.classNames, y = t.index, C = t.focusableElementIndex, D = t.totalItemCount, g = t.hasCheckmarks, P = t.hasIcons, M = t.contextualMenuItemAs, S = t.expandedMenuItemKey, h = t.onItemMouseDown, I = t.onItemClick, A = t.openSubMenu, R = t.dismissSubMenu, B = t.dismissMenu, i = T;
      e.contextualMenuItemAs && (i = k(e.contextualMenuItemAs, i)), M && (i = k(M, i));
      var l = H(e), _ = l !== null, E = V(e), o = W(e), K = e.itemProps, N = e.ariaLabel, p = e.ariaDescription, f = j(e, q);
      delete f.disabled;
      var a = e.role || E;
      p && (this._ariaDescriptionId = G());
      var v = J(e.ariaDescribedBy, p ? this._ariaDescriptionId : void 0, f["aria-describedby"]), w = {
        className: c.root,
        onClick: this._onItemClick,
        onKeyDown: o ? this._onItemKeyDown : void 0,
        onMouseEnter: this._onItemMouseEnter,
        onMouseLeave: this._onItemMouseLeave,
        onMouseDown: function(b) {
          return h ? h(e, b) : void 0;
        },
        onMouseMove: this._onItemMouseMove,
        href: e.href,
        title: e.title,
        "aria-label": N,
        "aria-describedby": v,
        "aria-haspopup": o || void 0,
        "aria-expanded": o ? e.key === S : void 0,
        "aria-posinset": C + 1,
        "aria-setsize": D,
        "aria-disabled": x(e),
        "aria-checked": (a === "menuitemcheckbox" || a === "menuitemradio") && _ ? !!l : void 0,
        "aria-selected": a === "menuitem" && _ ? !!l : void 0,
        role: a,
        // eslint-disable-next-line deprecation/deprecation
        style: e.style
      }, s = e.keytipProps;
      return s && o && (s = this._getMemoizedMenuButtonKeytipProps(s)), r.createElement(O, { keytipProps: s, ariaDescribedBy: v, disabled: x(e) }, function(b) {
        return r.createElement(
          "button",
          u({ ref: n._btn }, f, w, b),
          r.createElement(i, u({ componentRef: e.componentRef, item: e, classNames: c, index: y, onCheckmarkClick: g && I ? I : void 0, hasIcons: P, openSubMenu: A, dismissSubMenu: R, dismissMenu: B, getSubmenuTarget: n._getSubmenuTarget }, K)),
          n._renderAriaDescription(p, c.screenReaderText)
        );
      });
    }, d;
  }(L)
);
export {
  re as ContextualMenuButton
};
//# sourceMappingURL=ContextualMenuButton.js.map
