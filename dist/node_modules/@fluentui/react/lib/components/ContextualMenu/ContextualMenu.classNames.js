import { getDividerClassNames as I } from "../Divider/VerticalDivider.classNames.js";
import { getMenuItemStyles as g } from "./ContextualMenu.cnstyles.js";
import { memoizeFunction as b } from "../../../../utilities/lib/memoize.js";
import { mergeStyleSets as N } from "../../../../merge-styles/lib/mergeStyleSets.js";
import "../../../../style-utilities/lib/index.js";
import { getGlobalClassNames as y } from "../../../../style-utilities/lib/styles/getGlobalClassNames.js";
import { IsFocusVisibleClassName as o } from "../../../../utilities/lib/setFocusVisibility.js";
import { hiddenContentStyle as T } from "../../../../style-utilities/lib/styles/hiddenContentStyle.js";
import { getScreenSelector as D, ScreenWidthMaxMedium as S } from "../../../../style-utilities/lib/styles/CommonStyles.js";
var f = "28px", p = /* @__PURE__ */ D(0, S), G = /* @__PURE__ */ b(
  /* eslint-disable deprecation/deprecation */
  function(t) {
    var c;
    return N(I(t), {
      /* eslint-enable deprecation/deprecation */
      wrapper: {
        position: "absolute",
        right: 28,
        selectors: (c = {}, c[p] = {
          right: 32
          // fontSize of the icon increased from 12px to 16px
        }, c)
      },
      divider: {
        height: 16,
        width: 1
      }
    });
  }
), _ = {
  item: "ms-ContextualMenu-item",
  divider: "ms-ContextualMenu-divider",
  root: "ms-ContextualMenu-link",
  isChecked: "is-checked",
  isExpanded: "is-expanded",
  isDisabled: "is-disabled",
  linkContent: "ms-ContextualMenu-linkContent",
  linkContentMenu: "ms-ContextualMenu-linkContent",
  icon: "ms-ContextualMenu-icon",
  iconColor: "ms-ContextualMenu-iconColor",
  checkmarkIcon: "ms-ContextualMenu-checkmarkIcon",
  subMenuIcon: "ms-ContextualMenu-submenuIcon",
  label: "ms-ContextualMenu-itemText",
  secondaryText: "ms-ContextualMenu-secondaryText",
  splitMenu: "ms-ContextualMenu-splitMenu",
  screenReaderText: "ms-ContextualMenu-screenReaderText"
}, F = /* @__PURE__ */ b(function(t, c, s, r, h, l, C, v, u, k, m, x) {
  var i, a, d, M, e = g(t), n = y(_, t);
  return N({
    item: [n.item, e.item, C],
    divider: [n.divider, e.divider, v],
    root: [
      n.root,
      e.root,
      r && [n.isChecked, e.rootChecked],
      h && e.anchorLink,
      s && [n.isExpanded, e.rootExpanded],
      c && [n.isDisabled, e.rootDisabled],
      !c && !s && [
        {
          selectors: (i = {
            ":hover": e.rootHovered,
            ":active": e.rootPressed
          }, // eslint-disable-next-line @fluentui/max-len
          i[".".concat(o, " &:focus, .").concat(o, " &:focus:hover, :host(.").concat(o, ") &:focus, :host(.").concat(o, ") &:focus:hover")] = e.rootFocused, i[".".concat(o, " &:hover, :host(.").concat(o, ") &:hover")] = {
            background: "inherit;"
          }, i)
        }
      ],
      x
    ],
    splitPrimary: [
      e.root,
      {
        width: "calc(100% - ".concat(f, ")")
      },
      r && ["is-checked", e.rootChecked],
      (c || m) && ["is-disabled", e.rootDisabled],
      !(c || m) && !r && [
        {
          selectors: (a = {
            ":hover": e.rootHovered
          }, // when hovering over the splitPrimary also affect the splitMenu
          a[":hover ~ .".concat(n.splitMenu)] = e.rootHovered, a[":active"] = e.rootPressed, // eslint-disable-next-line @fluentui/max-len
          a[".".concat(o, " &:focus, .").concat(o, " &:focus:hover, :host(.").concat(o, ") &:focus, :host(.").concat(o, ") &:focus:hover")] = e.rootFocused, a[".".concat(o, " &:hover, :host(.").concat(o, ") &:hover")] = {
            background: "inherit;"
          }, a)
        }
      ]
    ],
    splitMenu: [
      n.splitMenu,
      e.root,
      {
        flexBasis: "0",
        padding: "0 8px",
        minWidth: f
      },
      s && ["is-expanded", e.rootExpanded],
      c && ["is-disabled", e.rootDisabled],
      !c && !s && [
        {
          selectors: (d = {
            ":hover": e.rootHovered,
            ":active": e.rootPressed
          }, // eslint-disable-next-line @fluentui/max-len
          d[".".concat(o, " &:focus, .").concat(o, " &:focus:hover, :host(.").concat(o, ") &:focus, :host(.").concat(o, ") &:focus:hover")] = e.rootFocused, d[".".concat(o, " &:hover, :host(.").concat(o, ") &:hover")] = {
            background: "inherit;"
          }, d)
        }
      ]
    ],
    anchorLink: e.anchorLink,
    linkContent: [n.linkContent, e.linkContent],
    linkContentMenu: [
      n.linkContentMenu,
      e.linkContent,
      {
        justifyContent: "center"
      }
    ],
    icon: [
      n.icon,
      l && e.iconColor,
      e.icon,
      u,
      c && [n.isDisabled, e.iconDisabled]
    ],
    iconColor: e.iconColor,
    checkmarkIcon: [n.checkmarkIcon, l && e.checkmarkIcon, e.icon, u],
    subMenuIcon: [
      n.subMenuIcon,
      e.subMenuIcon,
      k,
      s && { color: t.palette.neutralPrimary },
      c && [e.iconDisabled]
    ],
    label: [n.label, e.label],
    secondaryText: [n.secondaryText, e.secondaryText],
    splitContainer: [
      e.splitButtonFlexContainer,
      !c && !r && [
        {
          selectors: (M = {}, // eslint-disable-next-line @fluentui/max-len
          M[".".concat(o, " &:focus, .").concat(o, " &:focus:hover, :host(.").concat(o, ") &:focus, :host(.").concat(o, ") &:focus:hover")] = e.rootFocused, M)
        }
      ]
    ],
    screenReaderText: [
      n.screenReaderText,
      e.screenReaderText,
      T,
      { visibility: "hidden" }
    ]
  });
}), U = function(t) {
  var c = t.theme, s = t.disabled, r = t.expanded, h = t.checked, l = t.isAnchorLink, C = t.knownIcon, v = t.itemClassName, u = t.dividerClassName, k = t.iconClassName, m = t.subMenuClassName, x = t.primaryDisabled, i = t.className;
  return F(c, s, r, h, l, C, v, u, k, m, x, i);
};
export {
  F as getItemClassNames,
  U as getItemStyles,
  G as getSplitButtonVerticalDividerClassNames
};
//# sourceMappingURL=ContextualMenu.classNames.js.map
