import { __assign as c } from "../../../../../tslib/tslib.es6.js";
import * as s from "react";
import { classNames as f, MS_ICON as b } from "./Icon.styles.js";
import { memoizeFunction as y } from "../../../../utilities/lib/memoize.js";
import { getIcon as F } from "../../../../style-utilities/lib/utilities/icons.js";
import "../../../../style-utilities/lib/index.js";
import { getNativeProps as I, htmlElementProperties as P } from "../../../../utilities/lib/properties.js";
import { css as h } from "../../../../utilities/lib/css.js";
var C = /* @__PURE__ */ y(
  function(e) {
    var t = F(e) || {
      subset: {},
      code: void 0
    }, n = t.code, a = t.subset;
    return n ? {
      children: n,
      iconClassName: a.className,
      fontFamily: a.fontFace && a.fontFace.fontFamily,
      mergeImageProps: a.mergeImageProps
    } : null;
  },
  void 0,
  !0
  /*ignoreNullOrUndefinedResult */
), O = function(e) {
  var t = e.iconName, n = e.className, a = e.style, d = a === void 0 ? {} : a, i = C(t) || {}, u = i.iconClassName, o = i.children, N = i.fontFamily, r = i.mergeImageProps, g = I(e, P), m = e["aria-label"] || e.title, v = e["aria-label"] || e["aria-labelledby"] || e.title ? {
    role: r ? void 0 : "img"
  } : {
    "aria-hidden": !0
  }, l = o;
  return r && typeof o == "object" && typeof o.props == "object" && m && (l = s.cloneElement(o, { alt: m })), s.createElement("i", c({ "data-icon-name": t }, v, g, r ? {
    title: void 0,
    "aria-label": void 0
  } : {}, {
    className: h(b, f.root, u, !t && f.placeholder, n),
    // Apply the font family this way to ensure it doesn't get overridden by Fabric Core ms-Icon styles
    // https://github.com/microsoft/fluentui/issues/10449
    style: c({ fontFamily: N }, d)
  }), l);
};
export {
  O as FontIcon,
  C as getIconContent
};
//# sourceMappingURL=FontIcon.js.map
