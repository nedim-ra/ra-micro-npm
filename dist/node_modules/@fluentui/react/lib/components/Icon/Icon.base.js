import { __extends as x, __assign as p } from "../../../../../tslib/tslib.es6.js";
import * as l from "react";
import { IconType as f } from "./Icon.types.js";
import { Image as A } from "../Image/Image.js";
import { ImageLoadState as B } from "../Image/Image.types.js";
import { getIconContent as R } from "./FontIcon.js";
import { getNativeProps as j, htmlElementProperties as z } from "../../../../utilities/lib/properties.js";
import { classNamesFunction as F } from "../../../../utilities/lib/classNamesFunction.js";
var k = /* @__PURE__ */ F({
  // Icon is used a lot by other components.
  // It's likely to see expected cases which pass different className to the Icon.
  // Therefore setting a larger cache size.
  cacheSize: 100
}), M = (
  /** @class */
  /* @__PURE__ */ function(h) {
    x(c, h);
    function c(a) {
      var e = h.call(this, a) || this;
      return e._onImageLoadingStateChange = function(o) {
        e.props.imageProps && e.props.imageProps.onLoadingStateChange && e.props.imageProps.onLoadingStateChange(o), o === B.error && e.setState({ imageLoadError: !0 });
      }, e.state = {
        imageLoadError: !1
      }, e;
    }
    return c.prototype.render = function() {
      var a = this.props, e = a.children, o = a.className, v = a.styles, t = a.iconName, C = a.imageErrorAs, I = a.theme, N = typeof t == "string" && t.length === 0, r = (
        // eslint-disable-next-line deprecation/deprecation
        !!this.props.imageProps || this.props.iconType === f.image || this.props.iconType === f.Image
      ), g = R(t) || {}, P = g.iconClassName, i = g.children, s = g.mergeImageProps, b = k(v, {
        theme: I,
        className: o,
        iconClassName: P,
        isImage: r,
        isPlaceholder: N
      }), u = r ? "span" : "i", y = j(this.props, z, [
        "aria-label"
      ]), L = this.state.imageLoadError, n = p(p({}, this.props.imageProps), { onLoadingStateChange: this._onImageLoadingStateChange }), E = L && C || A, S = this.props["aria-label"] || this.props.ariaLabel, m = n.alt || S || this.props.title, _ = !!(m || this.props["aria-labelledby"] || n["aria-label"] || n["aria-labelledby"]), T = _ ? {
        role: r || s ? void 0 : "img",
        "aria-label": r || s ? void 0 : m
      } : {
        "aria-hidden": !0
      }, d = i;
      return s && i && typeof i == "object" && m && (d = l.cloneElement(i, {
        alt: m
      })), l.createElement(u, p({ "data-icon-name": t }, T, y, s ? {
        title: void 0,
        "aria-label": void 0
      } : {}, { className: b.root }), r ? l.createElement(E, p({}, n)) : e || d);
    }, c;
  }(l.Component)
);
export {
  M as IconBase
};
//# sourceMappingURL=Icon.base.js.map
