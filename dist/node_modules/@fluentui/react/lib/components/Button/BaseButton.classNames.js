import { memoizeFunction as I } from "../../../../utilities/lib/memoize.js";
import { getGlobalClassNames as H } from "../../../../style-utilities/lib/styles/getGlobalClassNames.js";
import "../../../../style-utilities/lib/index.js";
import { mergeStyleSets as h } from "../../../../merge-styles/lib/mergeStyleSets.js";
var m = {
  msButton: "ms-Button",
  msButtonHasMenu: "ms-Button--hasMenu",
  msButtonIcon: "ms-Button-icon",
  msButtonMenuIcon: "ms-Button-menuIcon",
  msButtonLabel: "ms-Button-label",
  msButtonDescription: "ms-Button-description",
  msButtonScreenReaderText: "ms-Button-screenReaderText",
  msButtonFlexContainer: "ms-Button-flexContainer",
  msButtonTextContainer: "ms-Button-textContainer"
}, E = /* @__PURE__ */ I(function(i, o, d, B, v, x, t, p, r, C, u) {
  var a, e, n = H(m, i || {}), c = C && !u;
  return h(o.__shadowConfig__, {
    root: [
      n.msButton,
      o.root,
      B,
      r && ["is-checked", o.rootChecked],
      c && [
        "is-expanded",
        o.rootExpanded,
        (a = {}, a[":hover .".concat(n.msButtonIcon)] = o.iconExpandedHovered, // menuIcon falls back to rootExpandedHovered to support original behavior
        a[":hover .".concat(n.msButtonMenuIcon)] = o.menuIconExpandedHovered || o.rootExpandedHovered, a[":hover"] = o.rootExpandedHovered, a)
      ],
      p && [m.msButtonHasMenu, o.rootHasMenu],
      t && ["is-disabled", o.rootDisabled],
      !t && !c && !r && (e = {
        ":hover": o.rootHovered
      }, e[":hover .".concat(n.msButtonLabel)] = o.labelHovered, e[":hover .".concat(n.msButtonIcon)] = o.iconHovered, e[":hover .".concat(n.msButtonDescription)] = o.descriptionHovered, e[":hover .".concat(n.msButtonMenuIcon)] = o.menuIconHovered, e[":focus"] = o.rootFocused, e[":active"] = o.rootPressed, e[":active .".concat(n.msButtonIcon)] = o.iconPressed, e[":active .".concat(n.msButtonDescription)] = o.descriptionPressed, e[":active .".concat(n.msButtonMenuIcon)] = o.menuIconPressed, e),
      t && r && [o.rootCheckedDisabled],
      !t && r && {
        ":hover": o.rootCheckedHovered,
        ":active": o.rootCheckedPressed
      },
      d
    ],
    flexContainer: [n.msButtonFlexContainer, o.flexContainer],
    textContainer: [n.msButtonTextContainer, o.textContainer],
    icon: [
      n.msButtonIcon,
      v,
      o.icon,
      c && o.iconExpanded,
      r && o.iconChecked,
      t && o.iconDisabled
    ],
    label: [n.msButtonLabel, o.label, r && o.labelChecked, t && o.labelDisabled],
    menuIcon: [
      n.msButtonMenuIcon,
      x,
      o.menuIcon,
      r && o.menuIconChecked,
      t && !u && o.menuIconDisabled,
      !t && !c && !r && {
        ":hover": o.menuIconHovered,
        ":active": o.menuIconPressed
      },
      c && ["is-expanded", o.menuIconExpanded]
    ],
    description: [
      n.msButtonDescription,
      o.description,
      r && o.descriptionChecked,
      t && o.descriptionDisabled
    ],
    screenReaderText: [n.msButtonScreenReaderText, o.screenReaderText]
  });
});
export {
  m as ButtonGlobalClassNames,
  E as getBaseButtonClassNames
};
//# sourceMappingURL=BaseButton.classNames.js.map
