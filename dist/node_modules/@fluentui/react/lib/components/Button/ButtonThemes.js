import { __assign as s } from "../../../../../tslib/tslib.es6.js";
import "../../../../style-utilities/lib/index.js";
import { IsFocusVisibleClassName as k } from "../../../../utilities/lib/setFocusVisibility.js";
import { HighContrastSelector as t, getHighContrastNoAdjustStyle as p } from "../../../../style-utilities/lib/styles/CommonStyles.js";
var C = function() {
  return {
    position: "absolute",
    width: 1,
    right: 31,
    top: 8,
    bottom: 8
  };
};
function P(i) {
  var e, u, d, l, c, r = i.semanticColors, n = i.palette, b = r.buttonBackground, a = r.buttonBackgroundPressed, g = r.buttonBackgroundHovered, o = r.buttonBackgroundDisabled, y = r.buttonText, v = r.buttonTextHovered, x = r.buttonTextDisabled, B = r.buttonTextChecked, h = r.buttonTextCheckedHovered;
  return {
    root: {
      backgroundColor: b,
      color: y
    },
    rootHovered: (e = {
      backgroundColor: g,
      color: v
    }, e[t] = {
      borderColor: "Highlight",
      color: "Highlight"
    }, e),
    rootPressed: {
      backgroundColor: a,
      color: B
    },
    rootExpanded: {
      backgroundColor: a,
      color: B
    },
    rootChecked: {
      backgroundColor: a,
      color: B
    },
    rootCheckedHovered: {
      backgroundColor: a,
      color: h
    },
    rootDisabled: (u = {
      color: x,
      backgroundColor: o
    }, u[t] = {
      color: "GrayText",
      borderColor: "GrayText",
      backgroundColor: "Window"
    }, u),
    // Split button styles
    splitButtonContainer: (d = {}, d[t] = {
      border: "none"
    }, d),
    splitButtonMenuButton: {
      color: n.white,
      backgroundColor: "transparent",
      ":hover": (l = {
        backgroundColor: n.neutralLight
      }, l[t] = {
        color: "Highlight"
      }, l)
    },
    splitButtonMenuButtonDisabled: {
      backgroundColor: r.buttonBackgroundDisabled,
      ":hover": {
        backgroundColor: r.buttonBackgroundDisabled
      }
    },
    splitButtonDivider: s(s({}, C()), (c = { backgroundColor: n.neutralTertiaryAlt }, c[t] = {
      backgroundColor: "WindowText"
    }, c)),
    splitButtonDividerDisabled: {
      backgroundColor: i.palette.neutralTertiaryAlt
    },
    splitButtonMenuButtonChecked: {
      backgroundColor: n.neutralQuaternaryAlt,
      ":hover": {
        backgroundColor: n.neutralQuaternaryAlt
      }
    },
    splitButtonMenuButtonExpanded: {
      backgroundColor: n.neutralQuaternaryAlt,
      ":hover": {
        backgroundColor: n.neutralQuaternaryAlt
      }
    },
    splitButtonMenuIcon: {
      color: r.buttonText
    },
    splitButtonMenuIconDisabled: {
      color: r.buttonTextDisabled
    }
  };
}
function _(i) {
  var e, u, d, l, c, r, n, b, a, g = i.palette, o = i.semanticColors;
  return {
    root: (e = {
      backgroundColor: o.primaryButtonBackground,
      border: "1px solid ".concat(o.primaryButtonBackground),
      color: o.primaryButtonText
    }, e[t] = s({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, p()), e[".".concat(k, " &:focus, :host(.").concat(k, ") &:focus")] = {
      ":after": {
        border: "none",
        outlineColor: g.white
      }
    }, e),
    rootHovered: (u = {
      backgroundColor: o.primaryButtonBackgroundHovered,
      border: "1px solid ".concat(o.primaryButtonBackgroundHovered),
      color: o.primaryButtonTextHovered
    }, u[t] = {
      color: "Window",
      backgroundColor: "Highlight",
      borderColor: "Highlight"
    }, u),
    rootPressed: (d = {
      backgroundColor: o.primaryButtonBackgroundPressed,
      border: "1px solid ".concat(o.primaryButtonBackgroundPressed),
      color: o.primaryButtonTextPressed
    }, d[t] = s({ color: "Window", backgroundColor: "WindowText", borderColor: "WindowText" }, p()), d),
    rootExpanded: {
      backgroundColor: o.primaryButtonBackgroundPressed,
      color: o.primaryButtonTextPressed
    },
    rootChecked: {
      backgroundColor: o.primaryButtonBackgroundPressed,
      color: o.primaryButtonTextPressed
    },
    rootCheckedHovered: {
      backgroundColor: o.primaryButtonBackgroundPressed,
      color: o.primaryButtonTextPressed
    },
    rootDisabled: (l = {
      color: o.primaryButtonTextDisabled,
      backgroundColor: o.primaryButtonBackgroundDisabled
    }, l[t] = {
      color: "GrayText",
      borderColor: "GrayText",
      backgroundColor: "Window"
    }, l),
    // Split button styles
    splitButtonContainer: (c = {}, c[t] = {
      border: "none"
    }, c),
    splitButtonDivider: s(s({}, C()), (r = { backgroundColor: g.white }, r[t] = {
      backgroundColor: "Window"
    }, r)),
    splitButtonMenuButton: (n = {
      backgroundColor: o.primaryButtonBackground,
      color: o.primaryButtonText
    }, n[t] = {
      backgroundColor: "Canvas"
    }, n[":hover"] = (b = {
      backgroundColor: o.primaryButtonBackgroundHovered
    }, b[t] = {
      color: "Highlight"
    }, b), n),
    splitButtonMenuButtonDisabled: {
      backgroundColor: o.primaryButtonBackgroundDisabled,
      ":hover": {
        backgroundColor: o.primaryButtonBackgroundDisabled
      }
    },
    splitButtonMenuButtonChecked: {
      backgroundColor: o.primaryButtonBackgroundPressed,
      ":hover": {
        backgroundColor: o.primaryButtonBackgroundPressed
      }
    },
    splitButtonMenuButtonExpanded: {
      backgroundColor: o.primaryButtonBackgroundPressed,
      ":hover": {
        backgroundColor: o.primaryButtonBackgroundPressed
      }
    },
    splitButtonMenuIcon: {
      color: o.primaryButtonText
    },
    splitButtonMenuIconDisabled: (a = {
      color: g.neutralTertiary
    }, a[t] = {
      color: "GrayText"
    }, a)
  };
}
export {
  _ as primaryStyles,
  P as standardStyles
};
//# sourceMappingURL=ButtonThemes.js.map
