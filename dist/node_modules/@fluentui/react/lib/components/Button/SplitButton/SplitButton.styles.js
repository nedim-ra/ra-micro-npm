import { __assign as o } from "../../../../../../tslib/tslib.es6.js";
import { memoizeFunction as _ } from "../../../../../utilities/lib/memoize.js";
import "../../../../../style-utilities/lib/index.js";
import { concatStyleSets as R } from "../../../../../merge-styles/lib/concatStyleSets.js";
import { getFocusStyle as k } from "../../../../../style-utilities/lib/styles/getFocusStyle.js";
import { HighContrastSelector as t, getHighContrastNoAdjustStyle as r } from "../../../../../style-utilities/lib/styles/CommonStyles.js";
var A = /* @__PURE__ */ _(function(e, W) {
  var i, l, d, a, u, s, g, c, b, h, m, p, x, C, B, T, y = e.effects, w = e.palette, n = e.semanticColors, f = {
    left: -2,
    top: -2,
    bottom: -2,
    right: -2,
    border: "none"
  }, H = {
    position: "absolute",
    width: 1,
    right: 31,
    top: 8,
    bottom: 8
  }, v = {
    splitButtonContainer: [
      k(e, { highContrastStyle: f, inset: 2, pointerEvents: "none" }),
      {
        display: "inline-flex",
        ".ms-Button--default": {
          borderTopRightRadius: "0",
          borderBottomRightRadius: "0",
          borderRight: "none",
          flexGrow: "1"
        },
        ".ms-Button--primary": (i = {
          borderTopRightRadius: "0",
          borderBottomRightRadius: "0",
          border: "none",
          flexGrow: "1",
          ":hover": {
            border: "none"
          },
          ":active": {
            border: "none"
          }
        }, i[t] = o(o({ color: "WindowText", backgroundColor: "Window", border: "1px solid WindowText", borderRightWidth: "0" }, r()), { ":hover": {
          backgroundColor: "Highlight",
          border: "1px solid Highlight",
          borderRightWidth: "0",
          color: "HighlightText"
        }, ":active": {
          border: "1px solid Highlight"
        } }), i),
        ".ms-Button--default + .ms-Button": (l = {}, l[t] = {
          border: "1px solid WindowText",
          borderLeftWidth: "0",
          ":hover": {
            backgroundColor: "HighlightText",
            borderColor: "Highlight",
            color: "Highlight",
            ".ms-Button-menuIcon": o({ backgroundColor: "HighlightText", color: "Highlight" }, r())
          }
        }, l),
        '.ms-Button--default + .ms-Button[aria-expanded="true"]': (d = {}, d[t] = {
          backgroundColor: "HighlightText",
          borderColor: "Highlight",
          color: "Highlight",
          ".ms-Button-menuIcon": o({ backgroundColor: "HighlightText", color: "Highlight" }, r())
        }, d),
        ".ms-Button--primary + .ms-Button": (a = {
          border: "none"
        }, a[t] = {
          border: "1px solid WindowText",
          borderLeftWidth: "0",
          ":hover": {
            borderLeftWidth: "0",
            backgroundColor: "Highlight",
            borderColor: "Highlight",
            color: "HighlightText",
            ".ms-Button-menuIcon": o(o({}, r()), { color: "HighlightText" })
          }
        }, a),
        '.ms-Button--primary + .ms-Button[aria-expanded="true"]': o(o({ backgroundColor: "Highlight", borderColor: "Highlight", color: "HighlightText" }, r()), { ".ms-Button-menuIcon": {
          color: "HighlightText"
        } }),
        ".ms-Button.is-disabled": (u = {}, u[t] = {
          color: "GrayText",
          borderColor: "GrayText",
          backgroundColor: "Window"
        }, u)
      }
    ],
    splitButtonContainerHovered: {
      ".ms-Button--default.is-disabled": (s = {
        backgroundColor: n.buttonBackgroundDisabled,
        color: n.buttonTextDisabled
      }, s[t] = {
        color: "GrayText",
        borderColor: "GrayText",
        backgroundColor: "Window"
      }, s),
      ".ms-Button--primary.is-disabled": (g = {
        backgroundColor: n.primaryButtonBackgroundDisabled,
        color: n.primaryButtonTextDisabled
      }, g[t] = {
        color: "GrayText",
        borderColor: "GrayText",
        backgroundColor: "Window"
      }, g)
    },
    splitButtonContainerChecked: {
      ".ms-Button--primary": (c = {}, c[t] = o({ color: "Window", backgroundColor: "WindowText" }, r()), c)
    },
    splitButtonContainerCheckedHovered: {
      ".ms-Button--primary": (b = {}, b[t] = o({ color: "Window", backgroundColor: "WindowText" }, r()), b)
    },
    splitButtonContainerFocused: {
      outline: "none!important"
    },
    splitButtonMenuButton: (h = {
      padding: 6,
      height: "auto",
      boxSizing: "border-box",
      borderRadius: 0,
      borderTopRightRadius: y.roundedCorner2,
      borderBottomRightRadius: y.roundedCorner2,
      border: "1px solid ".concat(w.neutralSecondaryAlt),
      borderLeft: "none",
      outline: "transparent",
      userSelect: "none",
      display: "inline-block",
      textDecoration: "none",
      textAlign: "center",
      cursor: "pointer",
      verticalAlign: "top",
      width: 32,
      marginLeft: -1,
      marginTop: 0,
      marginRight: 0,
      marginBottom: 0
    }, h[t] = {
      ".ms-Button-menuIcon": {
        color: "WindowText"
      }
    }, h),
    splitButtonDivider: o(o({}, H), (m = {}, m[t] = {
      backgroundColor: "WindowText"
    }, m)),
    splitButtonDividerDisabled: o(o({}, H), (p = {}, p[t] = {
      backgroundColor: "GrayText"
    }, p)),
    splitButtonMenuButtonDisabled: (x = {
      pointerEvents: "none",
      border: "none",
      ":hover": {
        cursor: "default"
      },
      ".ms-Button--primary": (C = {}, C[t] = {
        color: "GrayText",
        borderColor: "GrayText",
        backgroundColor: "Window"
      }, C),
      ".ms-Button-menuIcon": (B = {}, B[t] = {
        color: "GrayText"
      }, B)
    }, x[t] = {
      color: "GrayText",
      border: "1px solid GrayText",
      backgroundColor: "Window"
    }, x),
    splitButtonFlexContainer: {
      display: "flex",
      height: "100%",
      flexWrap: "nowrap",
      justifyContent: "center",
      alignItems: "center"
    },
    splitButtonContainerDisabled: (T = {
      outline: "none",
      border: "none"
    }, T[t] = o({ color: "GrayText", borderColor: "GrayText", backgroundColor: "Window" }, r()), T),
    splitButtonMenuFocused: o({}, k(e, { highContrastStyle: f, inset: 2 }))
  };
  return R(v, W);
});
export {
  A as getStyles
};
//# sourceMappingURL=SplitButton.styles.js.map
