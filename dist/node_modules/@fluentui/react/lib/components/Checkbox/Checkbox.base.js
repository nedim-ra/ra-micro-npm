import { __assign as o } from "../../../../../tslib/tslib.es6.js";
import * as a from "react";
import { Icon as O } from "../Icon/Icon.js";
import { useFocusRects as U } from "../../../../utilities/lib/useFocusRects.js";
import { classNamesFunction as j } from "../../../../utilities/lib/classNamesFunction.js";
import { useId as A } from "../../../../react-hooks/lib/useId.js";
import { useMergedRefs as G } from "../../../../react-hooks/lib/useMergedRefs.js";
import { useControllableValue as E } from "../../../../react-hooks/lib/useControllableValue.js";
import { useWarnings as J } from "../../../../react-hooks/lib/useWarnings.js";
var K = /* @__PURE__ */ j(), Q = /* @__PURE__ */ a.forwardRef(function(e, d) {
  var n = e.disabled, u = e.required, c = e.inputProps, f = e.name, x = e.ariaLabel, L = e.ariaLabelledBy, S = e.ariaDescribedBy, _ = e.ariaPositionInSet, B = e.ariaSetSize, b = e.title, D = e.checkmarkIconProps, P = e.styles, q = e.theme, z = e.className, h = e.boxSide, F = h === void 0 ? "start" : h, C = A("checkbox-", e.id), N = a.useRef(null), M = G(N, d), s = a.useRef(null), g = E(e.checked, e.defaultChecked, e.onChange), l = g[0], v = g[1], R = E(e.indeterminate, e.defaultIndeterminate), r = R[0], m = R[1];
  U(N), T(e);
  var i = K(P, {
    theme: q,
    className: z,
    disabled: n,
    indeterminate: r,
    checked: l,
    reversed: F !== "start",
    isUsingCustomLabelRender: !!e.onRenderLabel
  }), V = a.useCallback(function(t) {
    r ? (v(!!l, t), m(!1)) : v(!l, t);
  }, [v, m, r, l]), I = a.useCallback(function(t) {
    return t && t.label ? a.createElement("span", { className: i.text, title: t.title }, t.label) : null;
  }, [i.text]), k = a.useCallback(function(t) {
    if (s.current) {
      var y = !!t;
      s.current.indeterminate = y, m(y);
    }
  }, [m]);
  X(e, l, r, k, s), a.useEffect(function() {
    return k(r);
  }, [k, r]);
  var W = e.onRenderLabel || I, w = r ? "mixed" : void 0, H = o(o({ className: i.input, type: "checkbox" }, c), { checked: !!l, disabled: n, required: u, name: f, id: C, title: b, onChange: V, "aria-disabled": n, "aria-label": x, "aria-labelledby": L, "aria-describedby": S, "aria-posinset": _, "aria-setsize": B, "aria-checked": w });
  return a.createElement(
    "div",
    { className: i.root, title: b, ref: M },
    a.createElement("input", o({}, H, { ref: s, title: b, "data-ktp-execute-target": !0 })),
    a.createElement(
      "label",
      { className: i.label, htmlFor: C },
      a.createElement(
        "div",
        { className: i.checkbox, "data-ktp-target": !0 },
        a.createElement(O, o({ iconName: "CheckMark" }, D, { className: i.checkmark }))
      ),
      W(e, I)
    )
  );
});
Q.displayName = "CheckboxBase";
function T(e) {
  process.env.NODE_ENV !== "production" && J({
    name: "Checkbox",
    props: e,
    mutuallyExclusive: {
      checked: "defaultChecked",
      indeterminate: "defaultIndeterminate"
    }
  });
}
function X(e, d, n, u, c) {
  a.useImperativeHandle(e.componentRef, function() {
    return {
      get checked() {
        return !!d;
      },
      get indeterminate() {
        return !!n;
      },
      set indeterminate(f) {
        u(f);
      },
      focus: function() {
        c.current && c.current.focus();
      }
    };
  }, [c, d, n, u]);
}
export {
  Q as CheckboxBase
};
//# sourceMappingURL=Checkbox.base.js.map
