{"version":3,"file":"useResponsiveMode.js","sources":["../../../../../../../node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js"],"sourcesContent":["import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport var useResponsiveMode = function (elementRef, overrideResponsiveMode) {\n    var _a = React.useState(getInitialResponsiveMode()), lastResponsiveMode = _a[0], setLastResponsiveMode = _a[1];\n    var onResize = React.useCallback(function () {\n        var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n        // Setting the same value should not cause a re-render.\n        if (lastResponsiveMode !== newResponsiveMode) {\n            setLastResponsiveMode(newResponsiveMode);\n        }\n    }, [elementRef, lastResponsiveMode]);\n    var win = useWindow();\n    useOnEvent(win, 'resize', onResize);\n    // Call resize function initially on mount, or if the override changes from defined to undefined\n    // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n    React.useEffect(function () {\n        if (overrideResponsiveMode === undefined) {\n            onResize();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n    }, [overrideResponsiveMode]);\n    return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;\n};\n//# sourceMappingURL=useResponsiveMode.js.map"],"names":["useResponsiveMode","elementRef","overrideResponsiveMode","_a","React","getInitialResponsiveMode","lastResponsiveMode","setLastResponsiveMode","onResize","newResponsiveMode","getResponsiveMode","getWindow","win","useWindow","useOnEvent"],"mappings":";;;;;AAUU,IAACA,IAAoB,SAAUC,GAAYC,GAAwB;AACzE,MAAIC,IAAKC,EAAM,SAASC,EAA0B,CAAA,GAAGC,IAAqBH,EAAG,CAAC,GAAGI,IAAwBJ,EAAG,CAAC,GACzGK,IAAWJ,EAAM,YAAY,WAAY;AACzC,QAAIK,IAAoBC,EAAkBC,EAAUV,EAAW,OAAO,CAAC;AAEvE,IAAIK,MAAuBG,KACvBF,EAAsBE,CAAiB;AAAA,EAEnD,GAAO,CAACR,GAAYK,CAAkB,CAAC,GAC/BM,IAAMC;AACV,SAAAC,EAAWF,GAAK,UAAUJ,CAAQ,GAGlCJ,EAAM,UAAU,WAAY;AACxB,IAAIF,MAA2B,UAC3BM;EAGZ,GAAO,CAACN,CAAsB,CAAC,GACpBA,KAAgGI;AAC3G;","x_google_ignoreList":[0]}