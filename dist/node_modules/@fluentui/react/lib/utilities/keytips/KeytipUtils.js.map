{"version":3,"file":"KeytipUtils.js","sources":["../../../../../../../node_modules/@fluentui/react/lib/utilities/keytips/KeytipUtils.js"],"sourcesContent":["import { __spreadArray } from \"tslib\";\nimport { KTP_SEPARATOR, KTP_PREFIX, DATAKTP_TARGET, DATAKTP_EXECUTE_TARGET, KTP_LAYER_ID } from './KeytipConstants';\nimport { addElementAtIndex } from '../../Utilities';\n/**\n * Converts a whole set of KeySequences into one keytip ID, which will be the ID for the last keytip sequence specified\n * keySequences should not include the initial keytip 'start' sequence.\n *\n * @param keySequences - Full path of IKeySequences for one keytip.\n * @returns String to use for the keytip ID.\n */\nexport function sequencesToID(keySequences) {\n    return keySequences.reduce(function (prevValue, keySequence) {\n        return prevValue + KTP_SEPARATOR + keySequence.split('').join(KTP_SEPARATOR);\n    }, KTP_PREFIX);\n}\n/**\n * Merges an overflow sequence with a key sequence.\n *\n * @param keySequences - Full sequence for one keytip.\n * @param overflowKeySequences - Full overflow keytip sequence.\n * @returns Sequence that will be used by the keytip when in the overflow.\n */\nexport function mergeOverflows(keySequences, overflowKeySequences) {\n    var overflowSequenceLen = overflowKeySequences.length;\n    var overflowSequence = __spreadArray([], overflowKeySequences, true).pop();\n    var newKeySequences = __spreadArray([], keySequences, true);\n    return addElementAtIndex(newKeySequences, overflowSequenceLen - 1, overflowSequence);\n}\n/**\n * Constructs the data-ktp-target attribute selector from a full key sequence.\n *\n * @param keySequences - Full string[] for a Keytip.\n * @returns String selector to use to query for the keytip target.\n */\nexport function ktpTargetFromSequences(keySequences) {\n    return '[' + DATAKTP_TARGET + '=\"' + sequencesToID(keySequences) + '\"]';\n}\n/**\n * Constructs the data-ktp-execute-target attribute selector from a keytip ID.\n *\n * @param keytipId - ID of the Keytip.\n * @returns String selector to use to query for the keytip execute target.\n */\nexport function ktpTargetFromId(keytipId) {\n    return '[' + DATAKTP_EXECUTE_TARGET + '=\"' + keytipId + '\"]';\n}\n/**\n * Gets the aria-describedby value to put on the component with this keytip.\n *\n * @param keySequences - KeySequences of the keytip.\n * @returns The aria-describedby value to set on the component with this keytip.\n */\nexport function getAriaDescribedBy(keySequences) {\n    var describedby = ' ' + KTP_LAYER_ID;\n    if (!keySequences.length) {\n        // Return just the layer ID\n        return describedby;\n    }\n    return describedby + ' ' + sequencesToID(keySequences);\n}\n//# sourceMappingURL=KeytipUtils.js.map"],"names":["sequencesToID","keySequences","prevValue","keySequence","KTP_SEPARATOR","KTP_PREFIX","mergeOverflows","overflowKeySequences","overflowSequenceLen","overflowSequence","__spreadArray","newKeySequences","addElementAtIndex","getAriaDescribedBy","describedby","KTP_LAYER_ID"],"mappings":";;;AAUO,SAASA,EAAcC,GAAc;AACxC,SAAOA,EAAa,OAAO,SAAUC,GAAWC,GAAa;AACzD,WAAOD,IAAYE,IAAgBD,EAAY,MAAM,EAAE,EAAE,KAAKC,CAAa;AAAA,EAC9E,GAAEC,CAAU;AACjB;AAQO,SAASC,EAAeL,GAAcM,GAAsB;AAC/D,MAAIC,IAAsBD,EAAqB,QAC3CE,IAAmBC,EAAc,CAAE,GAAEH,GAAsB,EAAI,EAAE,OACjEI,IAAkBD,EAAc,CAAE,GAAET,GAAc,EAAI;AAC1D,SAAOW,EAAkBD,GAAiBH,IAAsB,GAAGC,CAAgB;AACvF;AAyBO,SAASI,EAAmBZ,GAAc;AAC7C,MAAIa,IAAc,MAAMC;AACxB,SAAKd,EAAa,SAIXa,IAAc,MAAMd,EAAcC,CAAY,IAF1Ca;AAGf;","x_google_ignoreList":[0]}