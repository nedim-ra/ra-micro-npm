{"version":3,"file":"KeytipManager.js","sources":["../../../../../../../node_modules/@fluentui/react/lib/utilities/keytips/KeytipManager.js"],"sourcesContent":["import { __assign, __spreadArray } from \"tslib\";\nimport { EventGroup, getId } from '../../Utilities';\nimport { KeytipEvents } from '../../utilities/keytips/KeytipConstants';\n/**\n * This class is responsible for handling registering, updating, and unregistering of keytips\n */\nexport var KeytipManager = /** @class */ (function () {\n    function KeytipManager() {\n        this.keytips = {};\n        this.persistedKeytips = {};\n        this.sequenceMapping = {};\n        // This is (and should be) updated and kept in sync\n        // with the inKeytipMode in KeytipLayer.\n        this.inKeytipMode = false;\n        // Boolean that gets checked before entering keytip mode by the KeytipLayer\n        // Used for an override in special cases (e.g. Disable entering keytip mode when a modal is shown)\n        this.shouldEnterKeytipMode = true;\n        // Boolean to indicate whether to delay firing an event to update subscribers of\n        // keytip data changed.\n        this.delayUpdatingKeytipChange = false;\n    }\n    /**\n     * Static function to get singleton KeytipManager instance\n     *\n     * @returns Singleton KeytipManager instance\n     */\n    KeytipManager.getInstance = function () {\n        return this._instance;\n    };\n    /**\n     * Initialization code to set set parameters to define\n     * how the KeytipManager handles keytip data.\n     *\n     * @param delayUpdatingKeytipChange - T/F if we should delay notifiying keytip subscribers\n     * of keytip changes\n     */\n    KeytipManager.prototype.init = function (delayUpdatingKeytipChange) {\n        this.delayUpdatingKeytipChange = delayUpdatingKeytipChange;\n    };\n    /**\n     * Registers a keytip\n     *\n     * @param keytipProps - Keytip to register\n     * @param persisted - T/F if this keytip should be persisted, default is false\n     * @returns Unique ID for this keytip\n     */\n    KeytipManager.prototype.register = function (keytipProps, persisted) {\n        if (persisted === void 0) { persisted = false; }\n        var props = keytipProps;\n        if (!persisted) {\n            // Add the overflowSetSequence if necessary\n            props = this.addParentOverflow(keytipProps);\n            this.sequenceMapping[props.keySequences.toString()] = props;\n        }\n        // Create a unique keytip\n        var uniqueKeytip = this._getUniqueKtp(props);\n        // Add to dictionary\n        persisted\n            ? (this.persistedKeytips[uniqueKeytip.uniqueID] = uniqueKeytip)\n            : (this.keytips[uniqueKeytip.uniqueID] = uniqueKeytip);\n        // We only want to add something new if we are currently showing keytip mode\n        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n            var event_1 = persisted ? KeytipEvents.PERSISTED_KEYTIP_ADDED : KeytipEvents.KEYTIP_ADDED;\n            EventGroup.raise(this, event_1, {\n                keytip: props,\n                uniqueID: uniqueKeytip.uniqueID,\n            });\n        }\n        return uniqueKeytip.uniqueID;\n    };\n    /**\n     * Update a keytip\n     *\n     * @param keytipProps - Keytip to update\n     * @param uniqueID - Unique ID of this keytip\n     */\n    KeytipManager.prototype.update = function (keytipProps, uniqueID) {\n        var newKeytipProps = this.addParentOverflow(keytipProps);\n        var uniqueKeytip = this._getUniqueKtp(newKeytipProps, uniqueID);\n        var oldKeyTip = this.keytips[uniqueID];\n        if (oldKeyTip) {\n            // Update everything except 'visible'\n            uniqueKeytip.keytip.visible = oldKeyTip.keytip.visible;\n            // Update keytip in this.keytips\n            this.keytips[uniqueID] = uniqueKeytip;\n            // Update the sequence to be up to date\n            delete this.sequenceMapping[oldKeyTip.keytip.keySequences.toString()];\n            this.sequenceMapping[uniqueKeytip.keytip.keySequences.toString()] = uniqueKeytip.keytip;\n            // Raise event only if we are currently in keytip mode\n            if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n                EventGroup.raise(this, KeytipEvents.KEYTIP_UPDATED, {\n                    keytip: uniqueKeytip.keytip,\n                    uniqueID: uniqueKeytip.uniqueID,\n                });\n            }\n        }\n    };\n    /**\n     * Unregisters a keytip\n     *\n     * @param keytipToRemove - IKeytipProps of the keytip to remove\n     * @param uniqueID - Unique ID of this keytip\n     * @param persisted - T/F if this keytip should be persisted, default is false\n     */\n    KeytipManager.prototype.unregister = function (keytipToRemove, uniqueID, persisted) {\n        if (persisted === void 0) { persisted = false; }\n        persisted ? delete this.persistedKeytips[uniqueID] : delete this.keytips[uniqueID];\n        !persisted && delete this.sequenceMapping[keytipToRemove.keySequences.toString()];\n        var event = persisted ? KeytipEvents.PERSISTED_KEYTIP_REMOVED : KeytipEvents.KEYTIP_REMOVED;\n        // Update keytips only if we're in keytip mode\n        if (this.inKeytipMode || !this.delayUpdatingKeytipChange) {\n            EventGroup.raise(this, event, {\n                keytip: keytipToRemove,\n                uniqueID: uniqueID,\n            });\n        }\n    };\n    /**\n     * Manual call to enter keytip mode\n     */\n    KeytipManager.prototype.enterKeytipMode = function () {\n        EventGroup.raise(this, KeytipEvents.ENTER_KEYTIP_MODE);\n    };\n    /**\n     * Manual call to exit keytip mode\n     */\n    KeytipManager.prototype.exitKeytipMode = function () {\n        EventGroup.raise(this, KeytipEvents.EXIT_KEYTIP_MODE);\n    };\n    /**\n     * Gets all IKeytipProps from this.keytips\n     *\n     * @returns All keytips stored in the manager\n     */\n    KeytipManager.prototype.getKeytips = function () {\n        var _this = this;\n        return Object.keys(this.keytips).map(function (key) { return _this.keytips[key].keytip; });\n    };\n    /**\n     * Adds the overflowSetSequence to the keytipProps if its parent keytip also has it\n     *\n     * @param keytipProps - Keytip props to add overflowSetSequence to if necessary\n     * @returns - Modified keytip props, if needed to be modified\n     */\n    KeytipManager.prototype.addParentOverflow = function (keytipProps) {\n        var fullSequence = __spreadArray([], keytipProps.keySequences, true);\n        fullSequence.pop();\n        if (fullSequence.length !== 0) {\n            var parentKeytip = this.sequenceMapping[fullSequence.toString()];\n            if (parentKeytip && parentKeytip.overflowSetSequence) {\n                return __assign(__assign({}, keytipProps), { overflowSetSequence: parentKeytip.overflowSetSequence });\n            }\n        }\n        return keytipProps;\n    };\n    /**\n     * Public function to bind for overflow items that have a submenu\n     */\n    KeytipManager.prototype.menuExecute = function (overflowButtonSequences, keytipSequences) {\n        EventGroup.raise(this, KeytipEvents.PERSISTED_KEYTIP_EXECUTE, {\n            overflowButtonSequences: overflowButtonSequences,\n            keytipSequences: keytipSequences,\n        });\n    };\n    /**\n     * Creates an IUniqueKeytip object\n     *\n     * @param keytipProps - IKeytipProps\n     * @param uniqueID - Unique ID, will default to the next unique ID if not passed\n     * @returns IUniqueKeytip object\n     */\n    KeytipManager.prototype._getUniqueKtp = function (keytipProps, uniqueID) {\n        if (uniqueID === void 0) { uniqueID = getId(); }\n        return { keytip: __assign({}, keytipProps), uniqueID: uniqueID };\n    };\n    KeytipManager._instance = new KeytipManager();\n    return KeytipManager;\n}());\n//# sourceMappingURL=KeytipManager.js.map"],"names":["KeytipManager","delayUpdatingKeytipChange","keytipProps","persisted","props","uniqueKeytip","event_1","KeytipEvents","EventGroup","uniqueID","newKeytipProps","oldKeyTip","keytipToRemove","event","_this","key","fullSequence","__spreadArray","parentKeytip","__assign","overflowButtonSequences","keytipSequences","getId"],"mappings":"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","x_google_ignoreList":[0]}