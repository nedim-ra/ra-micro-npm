{"version":3,"file":"useConst.js","sources":["../../../../../node_modules/@fluentui/react-hooks/lib/useConst.js"],"sourcesContent":["import * as React from 'react';\n/**\n * Hook to initialize and return a constant value. Unlike `React.useMemo`, this is guaranteed to\n * always return the same value (and if the initializer is a function, only call it once).\n * This is similar to setting a private member in a class constructor.\n *\n * If the value should ever change based on dependencies, use `React.useMemo` instead.\n *\n * @param initialValue - Initial value, or function to get the initial value. Similar to `useState`,\n * only the value/function passed in the first time this is called is respected.\n * @returns The value. The identity of this value will always be the same.\n */\nexport function useConst(initialValue) {\n    // Use useRef to store the value because it's the least expensive built-in hook that works here\n    // (we could also use `const [value] = React.useState(initialValue)` but that's more expensive\n    // internally due to reducer handling which we don't need)\n    var ref = React.useRef();\n    if (ref.current === undefined) {\n        // Box the value in an object so we can tell if it's initialized even if the initializer\n        // returns/is undefined\n        ref.current = {\n            value: typeof initialValue === 'function' ? initialValue() : initialValue,\n        };\n    }\n    return ref.current.value;\n}\n//# sourceMappingURL=useConst.js.map"],"names":["useConst","initialValue","ref","React"],"mappings":";AAYO,SAASA,EAASC,GAAc;AAInC,MAAIC,IAAMC,EAAM;AAChB,SAAID,EAAI,YAAY,WAGhBA,EAAI,UAAU;AAAA,IACV,OAAO,OAAOD,KAAiB,aAAaA,EAAc,IAAGA;AAAA,EACzE,IAEWC,EAAI,QAAQ;AACvB;","x_google_ignoreList":[0]}