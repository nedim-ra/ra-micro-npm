{"version":3,"file":"useOnEvent.js","sources":["../../../../../node_modules/@fluentui/react-hooks/lib/useOnEvent.js"],"sourcesContent":["import { on } from '@fluentui/utilities';\nimport * as React from 'react';\n/**\n * Hook to attach an event handler on mount and handle cleanup.\n * @param element - Element (or ref to an element) to attach the event handler to\n * @param eventName - The event to attach a handler for\n * @param callback - The handler for the event\n * @param useCapture - Whether or not to attach the handler for the capture phase\n */\nexport function useOnEvent(element, eventName, callback, useCapture) {\n    // Use a ref for the callback to prevent repeatedly attaching/unattaching callbacks that are unstable across renders\n    var callbackRef = React.useRef(callback);\n    callbackRef.current = callback;\n    React.useEffect(function () {\n        var actualElement = element && 'current' in element ? element.current : element;\n        if (!actualElement || !actualElement.addEventListener) {\n            return;\n        }\n        var dispose = on(actualElement, eventName, function (ev) { return callbackRef.current(ev); }, useCapture);\n        return dispose;\n    }, [element, eventName, useCapture]);\n}\n//# sourceMappingURL=useOnEvent.js.map"],"names":["useOnEvent","element","eventName","callback","useCapture","callbackRef","React","actualElement","dispose","on","ev"],"mappings":";;AASO,SAASA,EAAWC,GAASC,GAAWC,GAAUC,GAAY;AAEjE,MAAIC,IAAcC,EAAM,OAAOH,CAAQ;AACvC,EAAAE,EAAY,UAAUF,GACtBG,EAAM,UAAU,WAAY;AACxB,QAAIC,IAAgBN,KAAW,aAAaA,IAAUA,EAAQ,UAAUA;AACxE,QAAI,GAACM,KAAiB,CAACA,EAAc,mBAGrC;AAAA,UAAIC,IAAUC,EAAGF,GAAeL,GAAW,SAAUQ,GAAI;AAAE,eAAOL,EAAY,QAAQK,CAAE;AAAA,MAAI,GAAEN,CAAU;AACxG,aAAOI;AAAA;AAAA,EACV,GAAE,CAACP,GAASC,GAAWE,CAAU,CAAC;AACvC;","x_google_ignoreList":[0]}