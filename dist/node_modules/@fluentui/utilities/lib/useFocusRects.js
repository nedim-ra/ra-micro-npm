import * as m from "react";
import { getWindow as P } from "./dom/getWindow.js";
import { isDirectionalKeyCode as K } from "./keyboard.js";
import { setFocusVisibility as l } from "./setFocusVisibility.js";
var y = /* @__PURE__ */ new WeakMap(), D = /* @__PURE__ */ new WeakMap();
function g(e, n) {
  var t, i = y.get(e);
  return i ? t = i + n : t = 1, y.set(e, t), t;
}
function _(e) {
  var n = D.get(e);
  if (n)
    return n;
  var t = function(r) {
    return E(r, e.registeredProviders);
  }, i = function(r) {
    return M(r, e.registeredProviders);
  }, u = function(r) {
    return C(r, e.registeredProviders);
  }, v = function(r) {
    return L(r, e.registeredProviders);
  };
  return n = { onMouseDown: t, onPointerDown: i, onKeyDown: u, onKeyUp: v }, D.set(e, n), n;
}
var F = /* @__PURE__ */ m.createContext(void 0);
function R(e) {
  var n = m.useContext(F);
  m.useEffect(function() {
    var t, i, u, v, r = P(e == null ? void 0 : e.current);
    if (!(!r || ((t = r.FabricConfig) === null || t === void 0 ? void 0 : t.disableFocusRects) === !0)) {
      var o = r, s, d, a, f;
      if (!((i = n == null ? void 0 : n.providerRef) === null || i === void 0) && i.current && (!((v = (u = n == null ? void 0 : n.providerRef) === null || u === void 0 ? void 0 : u.current) === null || v === void 0) && v.addEventListener)) {
        o = n.providerRef.current;
        var c = (
          /*@__NOINLINE__*/
          _(n)
        );
        s = c.onMouseDown, d = c.onPointerDown, a = c.onKeyDown, f = c.onKeyUp;
      } else
        s = E, d = M, a = C, f = L;
      var w = g(o, 1);
      return w <= 1 && (o.addEventListener("mousedown", s, !0), o.addEventListener("pointerdown", d, !0), o.addEventListener("keydown", a, !0), o.addEventListener("keyup", f, !0)), function() {
        var p;
        !r || ((p = r.FabricConfig) === null || p === void 0 ? void 0 : p.disableFocusRects) === !0 || (w = g(o, -1), w === 0 && (o.removeEventListener("mousedown", s, !0), o.removeEventListener("pointerdown", d, !0), o.removeEventListener("keydown", a, !0), o.removeEventListener("keyup", f, !0)));
      };
    }
  }, [n, e]);
}
var h = function(e) {
  return R(e.rootRef), null;
};
function E(e, n) {
  l(!1, e.target, n);
}
function M(e, n) {
  e.pointerType !== "mouse" && l(!1, e.target, n);
}
function C(e, n) {
  K(e.which) && l(!0, e.target, n);
}
function L(e, n) {
  K(e.which) && l(!0, e.target, n);
}
export {
  h as FocusRects,
  F as FocusRectsContext,
  R as useFocusRects
};
//# sourceMappingURL=useFocusRects.js.map
