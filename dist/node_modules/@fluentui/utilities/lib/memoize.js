import { Stylesheet as l } from "../../merge-styles/lib/Stylesheet.js";
var y = !1, v = 0, z = { empty: !0 }, p = {}, u = typeof WeakMap > "u" ? null : WeakMap;
function M() {
  v++;
}
function j(e, n, a) {
  if (n === void 0 && (n = 100), a === void 0 && (a = !1), !u)
    return e;
  if (!y) {
    var r = l.getInstance();
    r && r.onReset && l.getInstance().onReset(M), y = !0;
  }
  var o, c = 0, d = v;
  return function() {
    for (var f = [], i = 0; i < arguments.length; i++)
      f[i] = arguments[i];
    var t = o;
    (o === void 0 || d !== v || n > 0 && c > n) && (o = h(), c = 0, d = v), t = o;
    for (var s = 0; s < f.length; s++) {
      var m = g(f[s]);
      t.map.has(m) || t.map.set(m, h()), t = t.map.get(m);
    }
    return t.hasOwnProperty("value") || (t.value = e.apply(void 0, f), c++), a && (t.value === null || t.value === void 0) && (t.value = e.apply(void 0, f)), t.value;
  };
}
function k(e) {
  if (!u)
    return e;
  var n = new u();
  function a(r) {
    if (!r || typeof r != "function" && typeof r != "object")
      return e(r);
    if (n.has(r))
      return n.get(r);
    var o = e(r);
    return n.set(r, o), o;
  }
  return a;
}
function g(e) {
  if (e) {
    if (typeof e == "object" || typeof e == "function")
      return e;
    p[e] || (p[e] = { val: e });
  } else return z;
  return p[e];
}
function h() {
  return {
    map: u ? new u() : null
  };
}
export {
  k as createMemoizer,
  j as memoizeFunction,
  M as resetMemoizations
};
//# sourceMappingURL=memoize.js.map
