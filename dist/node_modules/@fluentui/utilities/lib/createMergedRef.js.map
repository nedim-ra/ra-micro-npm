{"version":3,"file":"createMergedRef.js","sources":["../../../../../node_modules/@fluentui/utilities/lib/createMergedRef.js"],"sourcesContent":["import { arraysEqual } from './array';\n/**\n * Set up a ref resolver function given internal state managed for the ref.\n * @param local Set\n */\nvar createResolver = function (local) {\n    return function (newValue) {\n        for (var _i = 0, _a = local.refs; _i < _a.length; _i++) {\n            var ref = _a[_i];\n            if (typeof ref === 'function') {\n                ref(newValue);\n            }\n            else if (ref) {\n                // work around the immutability of the React.Ref type\n                ref.current = newValue;\n            }\n        }\n    };\n};\n/**\n * Helper to merge refs from within class components.\n */\nexport var createMergedRef = function (value) {\n    var local = {\n        refs: [],\n    };\n    return function () {\n        var newRefs = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            newRefs[_i] = arguments[_i];\n        }\n        if (!local.resolver || !arraysEqual(local.refs, newRefs)) {\n            local.resolver = createResolver(local);\n        }\n        local.refs = newRefs;\n        return local.resolver;\n    };\n};\n//# sourceMappingURL=createMergedRef.js.map"],"names":["createResolver","local","newValue","_i","_a","ref","createMergedRef","value","newRefs","arraysEqual"],"mappings":";AAKA,IAAIA,IAAiB,SAAUC,GAAO;AAClC,SAAO,SAAUC,GAAU;AACvB,aAASC,IAAK,GAAGC,IAAKH,EAAM,MAAME,IAAKC,EAAG,QAAQD,KAAM;AACpD,UAAIE,IAAMD,EAAGD,CAAE;AACf,MAAI,OAAOE,KAAQ,aACfA,EAAIH,CAAQ,IAEPG,MAELA,EAAI,UAAUH;AAAA,IAErB;AAAA,EACT;AACA,GAIWI,IAAkB,SAAUC,GAAO;AAC1C,MAAIN,IAAQ;AAAA,IACR,MAAM,CAAE;AAAA,EAChB;AACI,SAAO,WAAY;AAEf,aADIO,IAAU,CAAA,GACLL,IAAK,GAAGA,IAAK,UAAU,QAAQA;AACpC,MAAAK,EAAQL,CAAE,IAAI,UAAUA,CAAE;AAE9B,YAAI,CAACF,EAAM,YAAY,CAACQ,EAAYR,EAAM,MAAMO,CAAO,OACnDP,EAAM,WAAWD,EAAeC,CAAK,IAEzCA,EAAM,OAAOO,GACNP,EAAM;AAAA,EACrB;AACA;","x_google_ignoreList":[0]}