import { __rest as w, __assign as I } from "../../../tslib/tslib.es6.js";
import * as i from "react";
import { useCustomizationSettings as W } from "./customizations/useCustomizationSettings.js";
import { useMergeStylesHooks as k } from "./shadowDom/hooks/useMergeStylesHooks.js";
import { concatStyleSetsWithProps as x } from "../../merge-styles/lib/concatStyleSetsWithProps.js";
var C = ["theme", "styles"];
function M(d, f, l, t, y) {
  t = t || { scope: "", fields: void 0 };
  var _ = t.scope, c = t.fields, v = c === void 0 ? C : c, r = i.forwardRef(function(n, S) {
    var e = i.useRef(), o = W(v, _), s = o.styles;
    o.dir;
    var h = w(o, ["styles", "dir"]), N = l ? l(n) : void 0, g = k().useStyled, p = e.current && e.current.__cachedInputs__ || [], a = n.styles;
    if (!e.current || s !== p[1] || a !== p[2]) {
      var u = function(R) {
        return x(R, f, s, a);
      };
      u.__cachedInputs__ = [
        f,
        s,
        a
      ], u.__noStyleOverride__ = !s && !a, e.current = u;
    }
    return e.current.__shadowConfig__ = g(_), i.createElement(d, I({ ref: S }, h, N, n, { styles: e.current }));
  });
  r.displayName = "Styled".concat(d.displayName || d.name);
  var m = y ? i.memo(r) : r;
  return r.displayName && (m.displayName = r.displayName), m;
}
export {
  M as styled
};
//# sourceMappingURL=styled.js.map
