{"version":3,"file":"Customizer.js","sources":["../../../../../../node_modules/@fluentui/utilities/lib/customizations/Customizer.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { Customizations } from './Customizations';\nimport { CustomizerContext } from './CustomizerContext';\nimport { mergeCustomizations } from './mergeCustomizations';\n/**\n * The Customizer component allows for default props to be mixed into components which\n * are decorated with the customizable() decorator, or use the styled HOC. This enables\n * injection scenarios like:\n *\n * 1. render svg icons instead of the icon font within all buttons\n * 2. inject a custom theme object into a component\n *\n * Props are provided via the settings prop which should be one of the following:\n * - A json map which contains 1 or more name/value pairs representing injectable props.\n * - A function that receives the current settings and returns the new ones that apply to the scope\n *\n * @public\n *\n * @deprecated This component is deprecated for purpose of applying theme to components\n * as of `@fluentui/react` version 8. Use `ThemeProvider` for applying theme instead.\n */\nvar Customizer = /** @class */ (function (_super) {\n    __extends(Customizer, _super);\n    function Customizer() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this._onCustomizationChange = function () { return _this.forceUpdate(); };\n        return _this;\n    }\n    Customizer.prototype.componentDidMount = function () {\n        Customizations.observe(this._onCustomizationChange);\n    };\n    Customizer.prototype.componentWillUnmount = function () {\n        Customizations.unobserve(this._onCustomizationChange);\n    };\n    Customizer.prototype.render = function () {\n        var _this = this;\n        var contextTransform = this.props.contextTransform;\n        return (React.createElement(CustomizerContext.Consumer, null, function (parentContext) {\n            var newContext = mergeCustomizations(_this.props, parentContext);\n            if (contextTransform) {\n                newContext = contextTransform(newContext);\n            }\n            return React.createElement(CustomizerContext.Provider, { value: newContext }, _this.props.children);\n        }));\n    };\n    return Customizer;\n}(React.Component));\nexport { Customizer };\n//# sourceMappingURL=Customizer.js.map"],"names":["Customizer","_super","__extends","_this","Customizations","contextTransform","React","CustomizerContext","parentContext","newContext","mergeCustomizations"],"mappings":";;;;;AAsBG,IAACA;AAAA;AAAA,EAA4B,yBAAUC,GAAQ;AAC9C,IAAAC,EAAUF,GAAYC,CAAM;AAC5B,aAASD,IAAa;AAClB,UAAIG,IAAQF,MAAW,QAAQA,EAAO,MAAM,MAAM,SAAS,KAAK;AAChE,aAAAE,EAAM,yBAAyB,WAAY;AAAE,eAAOA,EAAM,YAAa;AAAA,SAChEA;AAAA,IACV;AACD,WAAAH,EAAW,UAAU,oBAAoB,WAAY;AACjD,MAAAI,EAAe,QAAQ,KAAK,sBAAsB;AAAA,IAC1D,GACIJ,EAAW,UAAU,uBAAuB,WAAY;AACpD,MAAAI,EAAe,UAAU,KAAK,sBAAsB;AAAA,IAC5D,GACIJ,EAAW,UAAU,SAAS,WAAY;AACtC,UAAIG,IAAQ,MACRE,IAAmB,KAAK,MAAM;AAClC,aAAQC,EAAM,cAAcC,EAAkB,UAAU,MAAM,SAAUC,GAAe;AACnF,YAAIC,IAAaC,EAAoBP,EAAM,OAAOK,CAAa;AAC/D,eAAIH,MACAI,IAAaJ,EAAiBI,CAAU,IAErCH,EAAM,cAAcC,EAAkB,UAAU,EAAE,OAAOE,KAAcN,EAAM,MAAM,QAAQ;AAAA,MAC9G,CAAS;AAAA,IACT,GACWH;AAAA,EACX,EAAEM,EAAM,SAAS;AAAA;","x_google_ignoreList":[0]}