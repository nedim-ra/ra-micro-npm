{"version":3,"file":"getWindow.js","sources":["../../../../../../node_modules/@fluentui/utilities/lib/dom/getWindow.js"],"sourcesContent":["import { canUseDOM } from './canUseDOM';\nvar _window = undefined;\n// Note: Accessing \"window\" in IE11 is somewhat expensive, and calling \"typeof window\"\n// hits a memory leak, whereas aliasing it and calling \"typeof _window\" does not.\n// Caching the window value at the file scope lets us minimize the impact.\ntry {\n    // eslint-disable-next-line no-restricted-globals\n    _window = window;\n}\ncatch (e) {\n    /* no-op */\n}\n/**\n * Helper to get the window object. The helper will make sure to use a cached variable\n * of \"window\", to avoid overhead and memory leaks in IE11. Note that in popup scenarios the\n * window object won't match the \"global\" window object, and for these scenarios, you should\n * pass in an element hosted within the popup.\n *\n * @public\n */\nexport function getWindow(rootElement) {\n    if (!canUseDOM() || typeof _window === 'undefined') {\n        return undefined;\n    }\n    else {\n        var el = rootElement;\n        return el && el.ownerDocument && el.ownerDocument.defaultView ? el.ownerDocument.defaultView : _window;\n    }\n}\n//# sourceMappingURL=getWindow.js.map"],"names":["_window","getWindow","rootElement","canUseDOM","el"],"mappings":";AACA,IAAIA,IAAU;AAId,IAAI;AAEA,EAAAA,IAAU;AACd,QACU;AAEV;AASO,SAASC,EAAUC,GAAa;AACnC,MAAI,GAACC,EAAS,KAAM,OAAOH,IAAY,MAGlC;AACD,QAAII,IAAKF;AACT,WAAOE,KAAMA,EAAG,iBAAiBA,EAAG,cAAc,cAAcA,EAAG,cAAc,cAAcJ;AAAA,EAClG;AACL;","x_google_ignoreList":[0]}