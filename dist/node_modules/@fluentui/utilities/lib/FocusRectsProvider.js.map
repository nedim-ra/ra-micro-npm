{"version":3,"file":"FocusRectsProvider.js","sources":["../../../../../node_modules/@fluentui/utilities/lib/FocusRectsProvider.js"],"sourcesContent":["import * as React from 'react';\nimport { FocusRectsContext } from './useFocusRects';\nexport var FocusRectsProvider = function (props) {\n    var providerRef = props.providerRef, layerRoot = props.layerRoot;\n    var registeredProviders = React.useState([])[0];\n    var parentContext = React.useContext(FocusRectsContext);\n    // Inherit the parent context if it exists, unless this is a layer root.\n    // This allows the topmost provider element in the DOM tree to handle the focus events.\n    // Since layers are in a separate HTML tree from their parent, they shouldn't use the parent's providerRef.\n    var inheritParentContext = parentContext !== undefined && !layerRoot;\n    var context = React.useMemo(function () {\n        return inheritParentContext\n            ? undefined\n            : {\n                providerRef: providerRef,\n                registeredProviders: registeredProviders,\n                registerProvider: function (ref) {\n                    // Register this child provider with the current context, and any parent contexts\n                    registeredProviders.push(ref);\n                    parentContext === null || parentContext === void 0 ? void 0 : parentContext.registerProvider(ref);\n                },\n                unregisterProvider: function (ref) {\n                    parentContext === null || parentContext === void 0 ? void 0 : parentContext.unregisterProvider(ref);\n                    var i = registeredProviders.indexOf(ref);\n                    if (i >= 0) {\n                        registeredProviders.splice(i, 1);\n                    }\n                },\n            };\n    }, [providerRef, registeredProviders, parentContext, inheritParentContext]);\n    React.useEffect(function () {\n        if (context) {\n            context.registerProvider(context.providerRef);\n            return function () { return context.unregisterProvider(context.providerRef); };\n        }\n    }, [context]);\n    // Create a new context provider if this is not inheriting from the parent.\n    if (context) {\n        return React.createElement(FocusRectsContext.Provider, { value: context }, props.children);\n    }\n    else {\n        return React.createElement(React.Fragment, null, props.children);\n    }\n};\n//# sourceMappingURL=FocusRectsProvider.js.map"],"names":["FocusRectsProvider","props","providerRef","layerRoot","registeredProviders","React","parentContext","FocusRectsContext","inheritParentContext","context","ref","i"],"mappings":";;AAEU,IAACA,IAAqB,SAAUC,GAAO;AAC7C,MAAIC,IAAcD,EAAM,aAAaE,IAAYF,EAAM,WACnDG,IAAsBC,EAAM,SAAS,CAAA,CAAE,EAAE,CAAC,GAC1CC,IAAgBD,EAAM,WAAWE,CAAiB,GAIlDC,IAAuBF,MAAkB,UAAa,CAACH,GACvDM,IAAUJ,EAAM,QAAQ,WAAY;AACpC,WAAOG,IACD,SACA;AAAA,MACE,aAAaN;AAAA,MACb,qBAAqBE;AAAA,MACrB,kBAAkB,SAAUM,GAAK;AAE7B,QAAAN,EAAoB,KAAKM,CAAG,GAC5BJ,KAAkB,QAA4CA,EAAc,iBAAiBI,CAAG;AAAA,MACnG;AAAA,MACD,oBAAoB,SAAUA,GAAK;AAC/B,QAAAJ,KAAkB,QAA4CA,EAAc,mBAAmBI,CAAG;AAClG,YAAIC,IAAIP,EAAoB,QAAQM,CAAG;AACvC,QAAIC,KAAK,KACLP,EAAoB,OAAOO,GAAG,CAAC;AAAA,MAEtC;AAAA,IACjB;AAAA,EACK,GAAE,CAACT,GAAaE,GAAqBE,GAAeE,CAAoB,CAAC;AAQ1E,SAPAH,EAAM,UAAU,WAAY;AACxB,QAAII;AACA,aAAAA,EAAQ,iBAAiBA,EAAQ,WAAW,GACrC,WAAY;AAAE,eAAOA,EAAQ,mBAAmBA,EAAQ,WAAW;AAAA;EAEtF,GAAO,CAACA,CAAO,CAAC,GAERA,IACOJ,EAAM,cAAcE,EAAkB,UAAU,EAAE,OAAOE,EAAS,GAAER,EAAM,QAAQ,IAGlFI,EAAM,cAAcA,EAAM,UAAU,MAAMJ,EAAM,QAAQ;AAEvE;","x_google_ignoreList":[0]}