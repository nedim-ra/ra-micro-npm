function i(f, n) {
  if (!f || !n)
    return !f && !n;
  for (var r in f)
    if (f.hasOwnProperty(r) && (!n.hasOwnProperty(r) || n[r] !== f[r]))
      return !1;
  for (var r in n)
    if (n.hasOwnProperty(r) && !f.hasOwnProperty(r))
      return !1;
  return !0;
}
function l(f) {
  for (var n = [], r = 1; r < arguments.length; r++)
    n[r - 1] = arguments[r];
  return h.apply(this, [null, f].concat(n));
}
function h(f, n) {
  for (var r = [], t = 2; t < arguments.length; t++)
    r[t - 2] = arguments[t];
  n = n || {};
  for (var a = 0, e = r; a < e.length; a++) {
    var s = e[a];
    if (s)
      for (var u in s)
        s.hasOwnProperty(u) && (!f || f(u)) && (n[u] = s[u]);
  }
  return n;
}
export {
  l as assign,
  h as filteredAssign,
  i as shallowCompare
};
//# sourceMappingURL=object.js.map
