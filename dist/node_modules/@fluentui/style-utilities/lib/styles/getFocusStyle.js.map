{"version":3,"file":"getFocusStyle.js","sources":["../../../../../../node_modules/@fluentui/style-utilities/lib/styles/getFocusStyle.js"],"sourcesContent":["import { HighContrastSelector } from './CommonStyles';\nimport { IsFocusVisibleClassName } from '@fluentui/utilities';\nimport { ZIndexes } from './zIndexes';\nexport function getFocusStyle(theme, insetOrOptions, position, highContrastStyle, borderColor, outlineColor, isFocusedOnly, borderRadius) {\n    if (typeof insetOrOptions === 'number' || !insetOrOptions) {\n        return _getFocusStyleInternal(theme, {\n            inset: insetOrOptions,\n            position: position,\n            highContrastStyle: highContrastStyle,\n            borderColor: borderColor,\n            outlineColor: outlineColor,\n            isFocusedOnly: isFocusedOnly,\n            borderRadius: borderRadius,\n        });\n    }\n    else {\n        return _getFocusStyleInternal(theme, insetOrOptions);\n    }\n}\nfunction _getFocusStyleInternal(theme, options) {\n    var _a, _b;\n    if (options === void 0) { options = {}; }\n    var borderRadius = options.borderRadius, _c = options.inset, inset = _c === void 0 ? 0 : _c, _d = options.width, width = _d === void 0 ? 1 : _d, _e = options.position, position = _e === void 0 ? 'relative' : _e, highContrastStyle = options.highContrastStyle, _f = options.borderColor, borderColor = _f === void 0 ? theme.palette.white : _f, _g = options.outlineColor, outlineColor = _g === void 0 ? theme.palette.neutralSecondary : _g, _h = options.isFocusedOnly, isFocusedOnly = _h === void 0 ? true : _h, pointerEvents = options.pointerEvents;\n    return {\n        // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.\n        outline: 'transparent',\n        // Requirement because pseudo-element is absolutely positioned.\n        position: position,\n        selectors: (_a = {\n                // Clear the focus border in Firefox.\n                // Reference: http://stackoverflow.com/a/199319/1436671\n                '::-moz-focus-inner': {\n                    border: '0',\n                }\n            },\n            // When the element that uses this mixin is in a :focus state, add a pseudo-element to\n            // create a border.\n            _a[\".\".concat(IsFocusVisibleClassName, \" &\").concat(isFocusedOnly ? ':focus' : '', \":after, :host(.\").concat(IsFocusVisibleClassName, \") &\").concat(isFocusedOnly ? ':focus' : '', \":after\")] = {\n                content: '\"\"',\n                position: 'absolute',\n                pointerEvents: pointerEvents,\n                left: inset + 1,\n                top: inset + 1,\n                bottom: inset + 1,\n                right: inset + 1,\n                border: \"\".concat(width, \"px solid \").concat(borderColor),\n                outline: \"\".concat(width, \"px solid \").concat(outlineColor),\n                zIndex: ZIndexes.FocusStyle,\n                borderRadius: borderRadius,\n                selectors: (_b = {},\n                    _b[HighContrastSelector] = highContrastStyle,\n                    _b),\n            },\n            _a),\n    };\n}\n/**\n * Generates style to clear browser specific focus styles.\n */\nexport function focusClear() {\n    return {\n        selectors: {\n            '&::-moz-focus-inner': {\n                // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671\n                border: 0,\n            },\n            '&': {\n                // Clear browser specific focus styles and use transparent as placeholder for focus style\n                outline: 'transparent',\n            },\n        },\n    };\n}\n/**\n * Generates a style which can be used to set a border on focus.\n *\n * @param theme - The theme object to use.\n * @param inset - The number of pixels to inset the border (default 0)\n * @param width - The border width in pixels (default 1)\n * @param color - Color of the outline (default `theme.palette.neutralSecondary`)\n * @returns The style object.\n */\nexport function getFocusOutlineStyle(theme, inset, width, color) {\n    var _a;\n    if (inset === void 0) { inset = 0; }\n    if (width === void 0) { width = 1; }\n    return {\n        selectors: (_a = {},\n            _a[\":global(\".concat(IsFocusVisibleClassName, \") &:focus\")] = {\n                outline: \"\".concat(width, \" solid \").concat(color || theme.palette.neutralSecondary),\n                outlineOffset: \"\".concat(-inset, \"px\"),\n            },\n            _a),\n    };\n}\n/**\n * Generates text input border styles on focus.\n *\n * @param borderColor - Color of the border.\n * @param borderRadius - Radius of the border.\n * @param borderType - Type of the border.\n * @param borderPosition - Position of the border relative to the input element (default to -1\n * as it's the most common border width of the input element)\n * @returns The style object.\n */\nexport var getInputFocusStyle = function (borderColor, borderRadius, borderType, borderPosition) {\n    var _a, _b, _c;\n    if (borderType === void 0) { borderType = 'border'; }\n    if (borderPosition === void 0) { borderPosition = -1; }\n    var isBorderBottom = borderType === 'borderBottom';\n    return {\n        borderColor: borderColor,\n        selectors: {\n            ':after': (_a = {\n                    pointerEvents: 'none',\n                    content: \"''\",\n                    position: 'absolute',\n                    left: isBorderBottom ? 0 : borderPosition,\n                    top: borderPosition,\n                    bottom: borderPosition,\n                    right: isBorderBottom ? 0 : borderPosition\n                },\n                _a[borderType] = \"2px solid \".concat(borderColor),\n                _a.borderRadius = borderRadius,\n                _a.width = borderType === 'borderBottom' ? '100%' : undefined,\n                _a.selectors = (_b = {},\n                    _b[HighContrastSelector] = (_c = {},\n                        _c[borderType === 'border' ? 'borderColor' : 'borderBottomColor'] = 'Highlight',\n                        _c),\n                    _b),\n                _a),\n        },\n    };\n};\n//# sourceMappingURL=getFocusStyle.js.map"],"names":["getFocusStyle","theme","insetOrOptions","position","highContrastStyle","borderColor","outlineColor","isFocusedOnly","borderRadius","_getFocusStyleInternal","options","_a","_b","_c","inset","_d","width","_e","_f","_g","_h","pointerEvents","IsFocusVisibleClassName","ZIndexes","HighContrastSelector","focusClear"],"mappings":";;;AAGO,SAASA,EAAcC,GAAOC,GAAgBC,GAAUC,GAAmBC,GAAaC,GAAcC,GAAeC,GAAc;AACtI,SAAI,OAAON,KAAmB,YAAY,CAACA,IAChCO,EAAuBR,GAAO;AAAA,IACjC,OAAOC;AAAA,IACP,UAAUC;AAAA,IACV,mBAAmBC;AAAA,IACnB,aAAaC;AAAA,IACb,cAAcC;AAAA,IACd,eAAeC;AAAA,IACf,cAAcC;AAAA,EAC1B,CAAS,IAGMC,EAAuBR,GAAOC,CAAc;AAE3D;AACA,SAASO,EAAuBR,GAAOS,GAAS;AAC5C,MAAIC,GAAIC;AACR,EAAIF,MAAY,WAAUA,IAAU,CAAE;AACtC,MAAIF,IAAeE,EAAQ,cAAcG,IAAKH,EAAQ,OAAOI,IAAQD,MAAO,SAAS,IAAIA,GAAIE,IAAKL,EAAQ,OAAOM,IAAQD,MAAO,SAAS,IAAIA,GAAIE,IAAKP,EAAQ,UAAUP,IAAWc,MAAO,SAAS,aAAaA,GAAIb,IAAoBM,EAAQ,mBAAmBQ,IAAKR,EAAQ,aAAaL,IAAca,MAAO,SAASjB,EAAM,QAAQ,QAAQiB,GAAIC,IAAKT,EAAQ,cAAcJ,IAAea,MAAO,SAASlB,EAAM,QAAQ,mBAAmBkB,GAAIC,IAAKV,EAAQ,eAAeH,IAAgBa,MAAO,SAAS,KAAOA,GAAIC,IAAgBX,EAAQ;AACnhB,SAAO;AAAA;AAAA,IAEH,SAAS;AAAA;AAAA,IAET,UAAUP;AAAA,IACV,YAAYQ,IAAK;AAAA;AAAA;AAAA,MAGT,sBAAsB;AAAA,QAClB,QAAQ;AAAA,MACX;AAAA,IACJ;AAAA;AAAA,IAGDA,EAAG,IAAI,OAAOW,GAAyB,IAAI,EAAE,OAAOf,IAAgB,WAAW,IAAI,iBAAiB,EAAE,OAAOe,GAAyB,KAAK,EAAE,OAAOf,IAAgB,WAAW,IAAI,QAAQ,CAAC,IAAI;AAAA,MAC5L,SAAS;AAAA,MACT,UAAU;AAAA,MACV,eAAec;AAAA,MACf,MAAMP,IAAQ;AAAA,MACd,KAAKA,IAAQ;AAAA,MACb,QAAQA,IAAQ;AAAA,MAChB,OAAOA,IAAQ;AAAA,MACf,QAAQ,GAAG,OAAOE,GAAO,WAAW,EAAE,OAAOX,CAAW;AAAA,MACxD,SAAS,GAAG,OAAOW,GAAO,WAAW,EAAE,OAAOV,CAAY;AAAA,MAC1D,QAAQiB,EAAS;AAAA,MACjB,cAAcf;AAAA,MACd,YAAYI,IAAK,CAAE,GACfA,EAAGY,CAAoB,IAAIpB,GAC3BQ;AAAA,IACP,GACDD;AAAA,EACZ;AACA;AAIO,SAASc,IAAa;AACzB,SAAO;AAAA,IACH,WAAW;AAAA,MACP,uBAAuB;AAAA;AAAA,QAEnB,QAAQ;AAAA,MACX;AAAA,MACD,KAAK;AAAA;AAAA,QAED,SAAS;AAAA,MACZ;AAAA,IACJ;AAAA,EACT;AACA;","x_google_ignoreList":[0]}