{"version":3,"file":"theme.js","sources":["../../../../../../node_modules/@fluentui/style-utilities/lib/styles/theme.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { Customizations, getWindow } from '@fluentui/utilities';\nimport { loadTheme as legacyLoadTheme } from '@microsoft/load-themed-styles';\nimport { createTheme } from '@fluentui/theme';\nexport { createTheme } from '@fluentui/theme';\nvar _theme = createTheme({});\nvar _onThemeChangeCallbacks = [];\nexport var ThemeSettingName = 'theme';\nexport function initializeThemeInCustomizations() {\n    var _a;\n    var _b, _c;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var win = getWindow();\n    if ((_b = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _b === void 0 ? void 0 : _b.legacyTheme) {\n        // does everything the `else` clause does and more, such as invoke legacy theming\n        loadTheme(win.FabricConfig.legacyTheme);\n    }\n    else if (!Customizations.getSettings([ThemeSettingName]).theme) {\n        if ((_c = win === null || win === void 0 ? void 0 : win.FabricConfig) === null || _c === void 0 ? void 0 : _c.theme) {\n            _theme = createTheme(win.FabricConfig.theme);\n        }\n        // Set the default theme.\n        Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n    }\n}\ninitializeThemeInCustomizations();\n/**\n * Gets the theme object\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function getTheme(depComments) {\n    if (depComments === void 0) { depComments = false; }\n    if (depComments === true) {\n        _theme = createTheme({}, depComments);\n    }\n    return _theme;\n}\n/**\n * Registers a callback that gets called whenever the theme changes.\n * This should only be used when the component cannot automatically get theme changes through its state.\n * This will not register duplicate callbacks.\n */\nexport function registerOnThemeChangeCallback(callback) {\n    if (_onThemeChangeCallbacks.indexOf(callback) === -1) {\n        _onThemeChangeCallbacks.push(callback);\n    }\n}\n/**\n * See registerOnThemeChangeCallback().\n * Removes previously registered callbacks.\n */\nexport function removeOnThemeChangeCallback(callback) {\n    var i = _onThemeChangeCallbacks.indexOf(callback);\n    if (i === -1) {\n        return;\n    }\n    _onThemeChangeCallbacks.splice(i, 1);\n}\n/**\n * Applies the theme, while filling in missing slots.\n * @param theme - Partial theme object.\n * @param depComments - Whether to include deprecated tags as comments for deprecated slots.\n */\nexport function loadTheme(theme, depComments) {\n    var _a;\n    if (depComments === void 0) { depComments = false; }\n    _theme = createTheme(theme, depComments);\n    // Invoke the legacy method of theming the page as well.\n    legacyLoadTheme(__assign(__assign(__assign(__assign({}, _theme.palette), _theme.semanticColors), _theme.effects), _loadFonts(_theme)));\n    Customizations.applySettings((_a = {}, _a[ThemeSettingName] = _theme, _a));\n    _onThemeChangeCallbacks.forEach(function (callback) {\n        try {\n            callback(_theme);\n        }\n        catch (e) {\n            // don't let a bad callback break everything else\n        }\n    });\n    return _theme;\n}\n/**\n * Loads font variables into a JSON object.\n * @param theme - The theme object\n */\nfunction _loadFonts(theme) {\n    var lines = {};\n    for (var _i = 0, _a = Object.keys(theme.fonts); _i < _a.length; _i++) {\n        var fontName = _a[_i];\n        var font = theme.fonts[fontName];\n        for (var _b = 0, _c = Object.keys(font); _b < _c.length; _b++) {\n            var propName = _c[_b];\n            var name_1 = fontName + propName.charAt(0).toUpperCase() + propName.slice(1);\n            var value = font[propName];\n            if (propName === 'fontSize' && typeof value === 'number') {\n                // if it's a number, convert it to px by default like our theming system does\n                value = value + 'px';\n            }\n            lines[name_1] = value;\n        }\n    }\n    return lines;\n}\n//# sourceMappingURL=theme.js.map"],"names":["_theme","createTheme","_onThemeChangeCallbacks","ThemeSettingName","initializeThemeInCustomizations","_a","_b","_c","win","getWindow","loadTheme","Customizations","getTheme","depComments","theme","legacyLoadTheme","__assign","_loadFonts","callback","lines","_i","fontName","font","propName","name_1","value"],"mappings":";;;;;AAKA,IAAIA,IAAS,gBAAAC,EAAY,CAAA,CAAE,GACvBC,IAA0B,CAAA,GACnBC,IAAmB;AACvB,SAASC,IAAkC;AAC9C,MAAIC,GACAC,GAAIC,GAEJC,IAAMC;AACV,EAAK,GAAAH,IAAKE,KAAQ,OAAyB,SAASA,EAAI,kBAAkB,QAAQF,MAAO,WAAkBA,EAAG,cAE1GI,EAAUF,EAAI,aAAa,WAAW,IAEhCG,EAAe,YAAY,CAACR,CAAgB,CAAC,EAAE,UAChD,GAAAI,IAAKC,KAAQ,OAAyB,SAASA,EAAI,kBAAkB,QAAQD,MAAO,WAAkBA,EAAG,UAC1GP,IAASC,EAAYO,EAAI,aAAa,KAAK,IAG/CG,EAAe,eAAeN,IAAK,CAAE,GAAEA,EAAGF,CAAgB,IAAIH,GAAQK;AAE9E;AAMO,SAASO,EAASC,GAAa;AAClC,SAAIA,MAAgB,WAAUA,IAAc,KACxCA,MAAgB,OAChBb,IAASC,EAAY,IAAIY,CAAW,IAEjCb;AACX;AA2BO,SAASU,EAAUI,GAAOD,GAAa;AAC1C,MAAIR;AACJ,SAAIQ,MAAgB,WAAUA,IAAc,KAC5Cb,IAASC,EAAYa,GAAOD,CAAW,GAEvCE,EAAgBC,EAASA,EAASA,EAASA,EAAS,CAAA,GAAIhB,EAAO,OAAO,GAAGA,EAAO,cAAc,GAAGA,EAAO,OAAO,GAAGiB,EAAWjB,CAAM,CAAC,CAAC,GACrIW,EAAe,eAAeN,IAAK,CAAE,GAAEA,EAAGF,CAAgB,IAAIH,GAAQK,KACtEH,EAAwB,QAAQ,SAAUgB,GAAU;AAChD,QAAI;AACA,MAAAA,EAASlB,CAAM;AAAA,IAClB,QACS;AAAA,IAET;AAAA,EACT,CAAK,GACMA;AACX;AAKA,SAASiB,EAAWH,GAAO;AAEvB,WADIK,IAAQ,CAAA,GACHC,IAAK,GAAGf,IAAK,OAAO,KAAKS,EAAM,KAAK,GAAGM,IAAKf,EAAG,QAAQe;AAG5D,aAFIC,IAAWhB,EAAGe,CAAE,GAChBE,IAAOR,EAAM,MAAMO,CAAQ,GACtBf,IAAK,GAAGC,IAAK,OAAO,KAAKe,CAAI,GAAGhB,IAAKC,EAAG,QAAQD,KAAM;AAC3D,UAAIiB,IAAWhB,EAAGD,CAAE,GAChBkB,IAASH,IAAWE,EAAS,OAAO,CAAC,EAAE,gBAAgBA,EAAS,MAAM,CAAC,GACvEE,IAAQH,EAAKC,CAAQ;AACzB,MAAIA,MAAa,cAAc,OAAOE,KAAU,aAE5CA,IAAQA,IAAQ,OAEpBN,EAAMK,CAAM,IAAIC;AAAA,IACnB;AAEL,SAAON;AACX;","x_google_ignoreList":[0]}