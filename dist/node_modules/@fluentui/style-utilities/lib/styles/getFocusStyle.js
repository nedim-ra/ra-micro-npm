import { HighContrastSelector as C } from "./CommonStyles.js";
import { ZIndexes as S } from "./zIndexes.js";
import { IsFocusVisibleClassName as v } from "../../../utilities/lib/setFocusVisibility.js";
function R(n, e, c, t, o, i, r, l) {
  return typeof e == "number" || !e ? h(n, {
    inset: e,
    position: c,
    highContrastStyle: t,
    borderColor: o,
    outlineColor: i,
    isFocusedOnly: r,
    borderRadius: l
  }) : h(n, e);
}
function h(n, e) {
  var c, t;
  e === void 0 && (e = {});
  var o = e.borderRadius, i = e.inset, r = i === void 0 ? 0 : i, l = e.width, s = l === void 0 ? 1 : l, a = e.position, g = a === void 0 ? "relative" : a, p = e.highContrastStyle, u = e.borderColor, y = u === void 0 ? n.palette.white : u, d = e.outlineColor, _ = d === void 0 ? n.palette.neutralSecondary : d, f = e.isFocusedOnly, b = f === void 0 ? !0 : f, m = e.pointerEvents;
  return {
    // Clear browser-specific focus styles and use 'transparent' as placeholder for focus style.
    outline: "transparent",
    // Requirement because pseudo-element is absolutely positioned.
    position: g,
    selectors: (c = {
      // Clear the focus border in Firefox.
      // Reference: http://stackoverflow.com/a/199319/1436671
      "::-moz-focus-inner": {
        border: "0"
      }
    }, // When the element that uses this mixin is in a :focus state, add a pseudo-element to
    // create a border.
    c[".".concat(v, " &").concat(b ? ":focus" : "", ":after, :host(.").concat(v, ") &").concat(b ? ":focus" : "", ":after")] = {
      content: '""',
      position: "absolute",
      pointerEvents: m,
      left: r + 1,
      top: r + 1,
      bottom: r + 1,
      right: r + 1,
      border: "".concat(s, "px solid ").concat(y),
      outline: "".concat(s, "px solid ").concat(_),
      zIndex: S.FocusStyle,
      borderRadius: o,
      selectors: (t = {}, t[C] = p, t)
    }, c)
  };
}
function w() {
  return {
    selectors: {
      "&::-moz-focus-inner": {
        // Clear the focus border in Firefox. Reference: http://stackoverflow.com/a/199319/1436671
        border: 0
      },
      "&": {
        // Clear browser specific focus styles and use transparent as placeholder for focus style
        outline: "transparent"
      }
    }
  };
}
var E = function(n, e, c, t) {
  var o, i, r;
  return {
    borderColor: n,
    selectors: {
      ":after": (o = {
        pointerEvents: "none",
        content: "''",
        position: "absolute",
        left: t,
        top: t,
        bottom: t,
        right: t
      }, o[c] = "2px solid ".concat(n), o.borderRadius = e, o.width = void 0, o.selectors = (i = {}, i[C] = (r = {}, r.borderColor = "Highlight", r), i), o)
    }
  };
};
export {
  w as focusClear,
  R as getFocusStyle,
  E as getInputFocusStyle
};
//# sourceMappingURL=getFocusStyle.js.map
