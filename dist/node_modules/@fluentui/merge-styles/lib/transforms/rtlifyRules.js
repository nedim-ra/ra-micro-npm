var s, i = "left", c = "right", g = "@noflip", o = (s = {}, s[i] = c, s[c] = i, s), p = {
  "w-resize": "e-resize",
  "sw-resize": "se-resize",
  "nw-resize": "ne-resize"
};
function O(n, t, e) {
  if (n.rtl) {
    var f = t[e];
    if (!f)
      return;
    var r = t[e + 1];
    if (typeof r == "string" && r.indexOf(g) >= 0)
      t[e + 1] = r.replace(/\s*(?:\/\*\s*)?\@noflip\b(?:\s*\*\/)?\s*?/g, "");
    else if (f.indexOf(i) >= 0)
      t[e] = f.replace(i, c);
    else if (f.indexOf(c) >= 0)
      t[e] = f.replace(c, i);
    else if (String(r).indexOf(i) >= 0)
      t[e + 1] = r.replace(i, c);
    else if (String(r).indexOf(c) >= 0)
      t[e + 1] = r.replace(c, i);
    else if (o[f])
      t[e] = o[f];
    else if (p[r])
      t[e + 1] = p[r];
    else
      switch (f) {
        case "margin":
        case "padding":
          t[e + 1] = z(r);
          break;
        case "box-shadow":
          t[e + 1] = E(r, 0);
          break;
      }
  }
}
function E(n, t) {
  var e = n.split(" "), f = parseInt(e[t], 10);
  return e[0] = e[0].replace(String(f), String(f * -1)), e.join(" ");
}
function z(n) {
  if (typeof n == "string") {
    var t = n.split(" ");
    if (t.length === 4)
      return "".concat(t[0], " ").concat(t[3], " ").concat(t[2], " ").concat(t[1]);
  }
  return n;
}
export {
  O as rtlifyRules
};
//# sourceMappingURL=rtlifyRules.js.map
