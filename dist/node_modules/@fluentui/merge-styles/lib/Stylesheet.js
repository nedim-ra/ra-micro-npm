import { __assign as h } from "../../../tslib/tslib.es6.js";
import { SHADOW_DOM_STYLESHEET_SETTING as f, GLOBAL_STYLESHEET_KEY as m } from "./shadowConfig.js";
var c = {
  /**
   * Avoids style injection, use getRules() to read the styles.
   */
  none: 0,
  /**
   * Inserts rules using the insertRule api.
   */
  insertNode: 1,
  /**
   * Appends rules using appendChild.
   */
  appendChild: 2
}, d = "__stylesheet__", p = typeof navigator < "u" && /* @__PURE__ */ /rv:11.0/.test(navigator.userAgent), a = {};
try {
  a = window || {};
} catch {
}
var u, y = (
  /** @class */
  /* @__PURE__ */ function() {
    function n(e, t) {
      var s, r, o, i, l, _;
      this._rules = [], this._preservedRules = [], this._counter = 0, this._keyToClassName = {}, this._onInsertRuleCallbacks = [], this._onResetCallbacks = [], this._classNameToArgs = {}, this._config = h({ injectionMode: typeof document > "u" ? c.none : c.insertNode, defaultPrefix: "css", namespace: void 0, cspSettings: void 0 }, e), this._classNameToArgs = (s = t == null ? void 0 : t.classNameToArgs) !== null && s !== void 0 ? s : this._classNameToArgs, this._counter = (r = t == null ? void 0 : t.counter) !== null && r !== void 0 ? r : this._counter, this._keyToClassName = (i = (o = this._config.classNameCache) !== null && o !== void 0 ? o : t == null ? void 0 : t.keyToClassName) !== null && i !== void 0 ? i : this._keyToClassName, this._preservedRules = (l = t == null ? void 0 : t.preservedRules) !== null && l !== void 0 ? l : this._preservedRules, this._rules = (_ = t == null ? void 0 : t.rules) !== null && _ !== void 0 ? _ : this._rules;
    }
    return n.getInstance = function(e) {
      if (u = a[d], a[f])
        return a[f].getInstance(e);
      if (!u || u._lastStyleElement && u._lastStyleElement.ownerDocument !== document) {
        var t = (a == null ? void 0 : a.FabricConfig) || {}, s = new n(t.mergeStyles, t.serializedStylesheet);
        u = s, a[d] = s;
      }
      return u;
    }, n.prototype.serialize = function() {
      return JSON.stringify({
        classNameToArgs: this._classNameToArgs,
        counter: this._counter,
        keyToClassName: this._keyToClassName,
        preservedRules: this._preservedRules,
        rules: this._rules
      });
    }, n.prototype.setConfig = function(e) {
      this._config = h(h({}, this._config), e);
    }, n.prototype.onReset = function(e) {
      var t = this;
      return this._onResetCallbacks.push(e), function() {
        t._onResetCallbacks = t._onResetCallbacks.filter(function(s) {
          return s !== e;
        });
      };
    }, n.prototype.onInsertRule = function(e) {
      var t = this;
      return this._onInsertRuleCallbacks.push(e), function() {
        t._onInsertRuleCallbacks = t._onInsertRuleCallbacks.filter(function(s) {
          return s !== e;
        });
      };
    }, n.prototype.getClassName = function(e) {
      var t = this._config.namespace, s = e || this._config.defaultPrefix;
      return "".concat(t ? t + "-" : "").concat(s, "-").concat(this._counter++);
    }, n.prototype.cacheClassName = function(e, t, s, r) {
      this._keyToClassName[this._getCacheKey(t)] = e, this._classNameToArgs[e] = {
        args: s,
        rules: r
      };
    }, n.prototype.classNameFromKey = function(e) {
      return this._keyToClassName[this._getCacheKey(e)];
    }, n.prototype.getClassNameCache = function() {
      return this._keyToClassName;
    }, n.prototype.argsFromClassName = function(e) {
      var t = this._classNameToArgs[e];
      return t && t.args;
    }, n.prototype.insertedRulesFromClassName = function(e) {
      var t = this._classNameToArgs[e];
      return t && t.rules;
    }, n.prototype.insertRule = function(e, t, s) {
      s === void 0 && (s = m);
      var r = this._config.injectionMode, o = r !== c.none ? this._getStyleElement() : void 0;
      if (t && this._preservedRules.push(e), o)
        switch (r) {
          case c.insertNode:
            this._insertRuleIntoSheet(o.sheet, e);
            break;
          case c.appendChild:
            o.appendChild(document.createTextNode(e));
            break;
        }
      else
        this._rules.push(e);
      this._config.onInsertRule && this._config.onInsertRule(e), this._onInsertRuleCallbacks.forEach(function(i) {
        return i({ key: s, sheet: o ? o.sheet : void 0, rule: e });
      });
    }, n.prototype.getRules = function(e) {
      return (e ? this._preservedRules.join("") : "") + this._rules.join("");
    }, n.prototype.reset = function() {
      this._rules = [], this._counter = 0, this._classNameToArgs = {}, this._keyToClassName = {}, this._onResetCallbacks.forEach(function(e) {
        return e();
      });
    }, n.prototype.resetKeys = function() {
      this._keyToClassName = {};
    }, n.prototype._createStyleElement = function() {
      var e, t = ((e = this._config.window) === null || e === void 0 ? void 0 : e.document) || document, s = t.head, r = t.createElement("style"), o = null;
      r.setAttribute("data-merge-styles", "true");
      var i = this._config.cspSettings;
      if (i && i.nonce && r.setAttribute("nonce", i.nonce), this._lastStyleElement)
        o = this._lastStyleElement.nextElementSibling;
      else {
        var l = this._findPlaceholderStyleTag();
        l ? o = l.nextElementSibling : o = s.childNodes[0];
      }
      return s.insertBefore(r, s.contains(o) ? o : null), this._lastStyleElement = r, r;
    }, n.prototype._insertRuleIntoSheet = function(e, t) {
      if (!e)
        return !1;
      try {
        return e.insertRule(t, e.cssRules.length), !0;
      } catch {
      }
      return !1;
    }, n.prototype._getCacheKey = function(e) {
      return e;
    }, n.prototype._getStyleElement = function() {
      var e = this;
      if (!this._styleElement && (this._styleElement = this._createStyleElement(), !p)) {
        var t = this._config.window || window;
        t.requestAnimationFrame(function() {
          e._styleElement = void 0;
        });
      }
      return this._styleElement;
    }, n.prototype._findPlaceholderStyleTag = function() {
      var e = document.head;
      return e ? e.querySelector("style[data-merge-styles]") : null;
    }, n;
  }()
);
export {
  c as InjectionMode,
  d as STYLESHEET_SETTING,
  y as Stylesheet
};
//# sourceMappingURL=Stylesheet.js.map
